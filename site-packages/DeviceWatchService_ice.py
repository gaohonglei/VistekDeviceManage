# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `DeviceWatchService.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Ice_Identity_ice
import Ice_Instrumentation_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Ice.Instrumentation
_M_Ice.Instrumentation = Ice.openModule('Ice.Instrumentation')

# Start of module Vistek
_M_Vistek = Ice.openModule('Vistek')
__name__ = 'Vistek'

# Start of module Vistek.Device
_M_Vistek.Device = Ice.openModule('Vistek.Device')
__name__ = 'Vistek.Device'

if 'CpuInfo' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.CpuInfo = Ice.createTempClass()
    class CpuInfo(Ice.Object):
        def __init__(self, cpuUseRate=0.0, cpuCount=0, physicCpuCount=0):
            self.cpuUseRate = cpuUseRate
            self.cpuCount = cpuCount
            self.physicCpuCount = physicCpuCount

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::CpuInfo')

        def ice_id(self, current=None):
            return '::Vistek::Device::CpuInfo'

        def ice_staticId():
            return '::Vistek::Device::CpuInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_CpuInfo)

        __repr__ = __str__

    _M_Vistek.Device.CpuInfoPrx = Ice.createTempClass()
    class CpuInfoPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.CpuInfoPrx.ice_checkedCast(proxy, '::Vistek::Device::CpuInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.CpuInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::CpuInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_CpuInfoPrx = IcePy.defineProxy('::Vistek::Device::CpuInfo', CpuInfoPrx)

    _M_Vistek.Device._t_CpuInfo = IcePy.defineClass('::Vistek::Device::CpuInfo', CpuInfo, -1, (), False, False, None, (), (
        ('cpuUseRate', (), IcePy._t_float, False, 0),
        ('cpuCount', (), IcePy._t_int, True, 0),
        ('physicCpuCount', (), IcePy._t_int, True, 1)
    ))
    CpuInfo._ice_type = _M_Vistek.Device._t_CpuInfo

    _M_Vistek.Device.CpuInfo = CpuInfo
    del CpuInfo

    _M_Vistek.Device.CpuInfoPrx = CpuInfoPrx
    del CpuInfoPrx

if 'MemInfo' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.MemInfo = Ice.createTempClass()
    class MemInfo(Ice.Object):
        def __init__(self, memSize=0.0, useMem=0.0, aviableMemSize=0.0, memUseRate=0.0):
            self.memSize = memSize
            self.useMem = useMem
            self.aviableMemSize = aviableMemSize
            self.memUseRate = memUseRate

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::MemInfo')

        def ice_id(self, current=None):
            return '::Vistek::Device::MemInfo'

        def ice_staticId():
            return '::Vistek::Device::MemInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_MemInfo)

        __repr__ = __str__

    _M_Vistek.Device.MemInfoPrx = Ice.createTempClass()
    class MemInfoPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.MemInfoPrx.ice_checkedCast(proxy, '::Vistek::Device::MemInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.MemInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::MemInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_MemInfoPrx = IcePy.defineProxy('::Vistek::Device::MemInfo', MemInfoPrx)

    _M_Vistek.Device._t_MemInfo = IcePy.defineClass('::Vistek::Device::MemInfo', MemInfo, -1, (), False, False, None, (), (
        ('memSize', (), IcePy._t_float, False, 0),
        ('useMem', (), IcePy._t_float, False, 0),
        ('aviableMemSize', (), IcePy._t_float, False, 0),
        ('memUseRate', (), IcePy._t_float, False, 0)
    ))
    MemInfo._ice_type = _M_Vistek.Device._t_MemInfo

    _M_Vistek.Device.MemInfo = MemInfo
    del MemInfo

    _M_Vistek.Device.MemInfoPrx = MemInfoPrx
    del MemInfoPrx

if 'DeviceRegisterInfo' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceRegisterInfo = Ice.createTempClass()
    class DeviceRegisterInfo(Ice.Object):
        def __init__(self, registerSuccessCount=0, registerFailCount=0, registerSuccessDeviceList='', registerFailDeviceList=''):
            self.registerSuccessCount = registerSuccessCount
            self.registerFailCount = registerFailCount
            self.registerSuccessDeviceList = registerSuccessDeviceList
            self.registerFailDeviceList = registerFailDeviceList

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::DeviceRegisterInfo')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceRegisterInfo'

        def ice_staticId():
            return '::Vistek::Device::DeviceRegisterInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceRegisterInfo)

        __repr__ = __str__

    _M_Vistek.Device.DeviceRegisterInfoPrx = Ice.createTempClass()
    class DeviceRegisterInfoPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceRegisterInfoPrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceRegisterInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceRegisterInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceRegisterInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceRegisterInfoPrx = IcePy.defineProxy('::Vistek::Device::DeviceRegisterInfo', DeviceRegisterInfoPrx)

    _M_Vistek.Device._t_DeviceRegisterInfo = IcePy.defineClass('::Vistek::Device::DeviceRegisterInfo', DeviceRegisterInfo, -1, (), False, False, None, (), (
        ('registerSuccessCount', (), IcePy._t_int, False, 0),
        ('registerFailCount', (), IcePy._t_int, False, 0),
        ('registerSuccessDeviceList', (), IcePy._t_string, False, 0),
        ('registerFailDeviceList', (), IcePy._t_string, False, 0)
    ))
    DeviceRegisterInfo._ice_type = _M_Vistek.Device._t_DeviceRegisterInfo

    _M_Vistek.Device.DeviceRegisterInfo = DeviceRegisterInfo
    del DeviceRegisterInfo

    _M_Vistek.Device.DeviceRegisterInfoPrx = DeviceRegisterInfoPrx
    del DeviceRegisterInfoPrx

if 'BasePhyServiceInfo' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.BasePhyServiceInfo = Ice.createTempClass()
    class BasePhyServiceInfo(Ice.Object):
        def __init__(self, serviceID='', cpuinfovalue=None, meminfovalue=None, registerinfovalue=None):
            self.serviceID = serviceID
            self.cpuinfovalue = cpuinfovalue
            self.meminfovalue = meminfovalue
            self.registerinfovalue = registerinfovalue

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::BasePhyServiceInfo')

        def ice_id(self, current=None):
            return '::Vistek::Device::BasePhyServiceInfo'

        def ice_staticId():
            return '::Vistek::Device::BasePhyServiceInfo'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_BasePhyServiceInfo)

        __repr__ = __str__

    _M_Vistek.Device.BasePhyServiceInfoPrx = Ice.createTempClass()
    class BasePhyServiceInfoPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.BasePhyServiceInfoPrx.ice_checkedCast(proxy, '::Vistek::Device::BasePhyServiceInfo', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.BasePhyServiceInfoPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::BasePhyServiceInfo'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_BasePhyServiceInfoPrx = IcePy.defineProxy('::Vistek::Device::BasePhyServiceInfo', BasePhyServiceInfoPrx)

    _M_Vistek.Device._t_BasePhyServiceInfo = IcePy.declareClass('::Vistek::Device::BasePhyServiceInfo')

    _M_Vistek.Device._t_BasePhyServiceInfo = IcePy.defineClass('::Vistek::Device::BasePhyServiceInfo', BasePhyServiceInfo, -1, (), False, False, None, (), (
        ('serviceID', (), IcePy._t_string, False, 0),
        ('cpuinfovalue', (), _M_Vistek.Device._t_CpuInfo, False, 0),
        ('meminfovalue', (), _M_Vistek.Device._t_MemInfo, False, 0),
        ('registerinfovalue', (), _M_Vistek.Device._t_DeviceRegisterInfo, False, 0)
    ))
    BasePhyServiceInfo._ice_type = _M_Vistek.Device._t_BasePhyServiceInfo

    _M_Vistek.Device.BasePhyServiceInfo = BasePhyServiceInfo
    del BasePhyServiceInfo

    _M_Vistek.Device.BasePhyServiceInfoPrx = BasePhyServiceInfoPrx
    del BasePhyServiceInfoPrx

if '_t_BasePhyServiceInfoList' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device._t_BasePhyServiceInfoList = IcePy.defineSequence('::Vistek::Device::BasePhyServiceInfoList', (), _M_Vistek.Device._t_BasePhyServiceInfo)

if 'ServiceStatusType' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.ServiceStatusType = Ice.createTempClass()
    class ServiceStatusType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    ServiceStatusType.vStatusOK = ServiceStatusType("vStatusOK", 0)
    ServiceStatusType.vStatusError = ServiceStatusType("vStatusError", 1)
    ServiceStatusType._enumerators = { 0:ServiceStatusType.vStatusOK, 1:ServiceStatusType.vStatusError }

    _M_Vistek.Device._t_ServiceStatusType = IcePy.defineEnum('::Vistek::Device::ServiceStatusType', ServiceStatusType, (), ServiceStatusType._enumerators)

    _M_Vistek.Device.ServiceStatusType = ServiceStatusType
    del ServiceStatusType

if 'ServiceStatus' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.ServiceStatus = Ice.createTempClass()
    class ServiceStatus(Ice.Object):
        def __init__(self, status=_M_Vistek.Device.ServiceStatusType.vStatusOK, error_msg=Ice.Unset):
            self.status = status
            self.error_msg = error_msg

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::ServiceStatus')

        def ice_id(self, current=None):
            return '::Vistek::Device::ServiceStatus'

        def ice_staticId():
            return '::Vistek::Device::ServiceStatus'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_ServiceStatus)

        __repr__ = __str__

    _M_Vistek.Device.ServiceStatusPrx = Ice.createTempClass()
    class ServiceStatusPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.ServiceStatusPrx.ice_checkedCast(proxy, '::Vistek::Device::ServiceStatus', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.ServiceStatusPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::ServiceStatus'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_ServiceStatusPrx = IcePy.defineProxy('::Vistek::Device::ServiceStatus', ServiceStatusPrx)

    _M_Vistek.Device._t_ServiceStatus = IcePy.defineClass('::Vistek::Device::ServiceStatus', ServiceStatus, -1, (), False, False, None, (), (
        ('status', (), _M_Vistek.Device._t_ServiceStatusType, False, 0),
        ('error_msg', (), IcePy._t_string, True, 0)
    ))
    ServiceStatus._ice_type = _M_Vistek.Device._t_ServiceStatus

    _M_Vistek.Device.ServiceStatus = ServiceStatus
    del ServiceStatus

    _M_Vistek.Device.ServiceStatusPrx = ServiceStatusPrx
    del ServiceStatusPrx

if 'BaseWatchService' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.BaseWatchService = Ice.createTempClass()
    class BaseWatchService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Device.BaseWatchService:
                raise RuntimeError('Vistek.Device.BaseWatchService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::BaseWatchService')

        def ice_id(self, current=None):
            return '::Vistek::Device::BaseWatchService'

        def ice_staticId():
            return '::Vistek::Device::BaseWatchService'
        ice_staticId = staticmethod(ice_staticId)

        def GetServiceRunningInfo(self, current=None):
            pass

        def isDeviceServiceOk(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_BaseWatchService)

        __repr__ = __str__

    _M_Vistek.Device.BaseWatchServicePrx = Ice.createTempClass()
    class BaseWatchServicePrx(Ice.ObjectPrx):

        def GetServiceRunningInfo(self, _ctx=None):
            return _M_Vistek.Device.BaseWatchService._op_GetServiceRunningInfo.invoke(self, ((), _ctx))

        def begin_GetServiceRunningInfo(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.BaseWatchService._op_GetServiceRunningInfo.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetServiceRunningInfo(self, _r):
            return _M_Vistek.Device.BaseWatchService._op_GetServiceRunningInfo.end(self, _r)

        def isDeviceServiceOk(self, _ctx=None):
            return _M_Vistek.Device.BaseWatchService._op_isDeviceServiceOk.invoke(self, ((), _ctx))

        def begin_isDeviceServiceOk(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.BaseWatchService._op_isDeviceServiceOk.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_isDeviceServiceOk(self, _r):
            return _M_Vistek.Device.BaseWatchService._op_isDeviceServiceOk.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.BaseWatchServicePrx.ice_checkedCast(proxy, '::Vistek::Device::BaseWatchService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.BaseWatchServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::BaseWatchService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_BaseWatchServicePrx = IcePy.defineProxy('::Vistek::Device::BaseWatchService', BaseWatchServicePrx)

    _M_Vistek.Device._t_BaseWatchService = IcePy.defineClass('::Vistek::Device::BaseWatchService', BaseWatchService, -1, (), True, False, None, (), ())
    BaseWatchService._ice_type = _M_Vistek.Device._t_BaseWatchService

    BaseWatchService._op_GetServiceRunningInfo = IcePy.Operation('GetServiceRunningInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    BaseWatchService._op_isDeviceServiceOk = IcePy.Operation('isDeviceServiceOk', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Vistek.Device._t_ServiceStatus, False, 0), ())

    _M_Vistek.Device.BaseWatchService = BaseWatchService
    del BaseWatchService

    _M_Vistek.Device.BaseWatchServicePrx = BaseWatchServicePrx
    del BaseWatchServicePrx

if 'DeviceWatchService' not in _M_Vistek.Device.__dict__:
    _M_Vistek.Device.DeviceWatchService = Ice.createTempClass()
    class DeviceWatchService(_M_Vistek.Device.BaseWatchService):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Device.DeviceWatchService:
                raise RuntimeError('Vistek.Device.DeviceWatchService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Device::BaseWatchService', '::Vistek::Device::DeviceWatchService')

        def ice_id(self, current=None):
            return '::Vistek::Device::DeviceWatchService'

        def ice_staticId():
            return '::Vistek::Device::DeviceWatchService'
        ice_staticId = staticmethod(ice_staticId)

        def GetPhysicInfo(self, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Device._t_DeviceWatchService)

        __repr__ = __str__

    _M_Vistek.Device.DeviceWatchServicePrx = Ice.createTempClass()
    class DeviceWatchServicePrx(_M_Vistek.Device.BaseWatchServicePrx):

        def GetPhysicInfo(self, _ctx=None):
            return _M_Vistek.Device.DeviceWatchService._op_GetPhysicInfo.invoke(self, ((), _ctx))

        def begin_GetPhysicInfo(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Device.DeviceWatchService._op_GetPhysicInfo.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetPhysicInfo(self, _r):
            return _M_Vistek.Device.DeviceWatchService._op_GetPhysicInfo.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Device.DeviceWatchServicePrx.ice_checkedCast(proxy, '::Vistek::Device::DeviceWatchService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Device.DeviceWatchServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Device::DeviceWatchService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Device._t_DeviceWatchServicePrx = IcePy.defineProxy('::Vistek::Device::DeviceWatchService', DeviceWatchServicePrx)

    _M_Vistek.Device._t_DeviceWatchService = IcePy.defineClass('::Vistek::Device::DeviceWatchService', DeviceWatchService, -1, (), True, False, None, (_M_Vistek.Device._t_BaseWatchService,), ())
    DeviceWatchService._ice_type = _M_Vistek.Device._t_DeviceWatchService

    DeviceWatchService._op_GetPhysicInfo = IcePy.Operation('GetPhysicInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_Vistek.Device._t_BasePhyServiceInfoList, False, 0), ())

    _M_Vistek.Device.DeviceWatchService = DeviceWatchService
    del DeviceWatchService

    _M_Vistek.Device.DeviceWatchServicePrx = DeviceWatchServicePrx
    del DeviceWatchServicePrx

# End of module Vistek.Device

__name__ = 'Vistek'

# End of module Vistek
