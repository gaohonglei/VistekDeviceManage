# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `DBEntity.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Ice_BuiltinSequences_ice
import Ice_Identity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Start of module Vistek
_M_Vistek = Ice.openModule('Vistek')
__name__ = 'Vistek'

# Start of module Vistek.Data
_M_Vistek.Data = Ice.openModule('Vistek.Data')
__name__ = 'Vistek.Data'

if 'SVIOFormat' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.SVIOFormat = Ice.createTempClass()
    class SVIOFormat(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    SVIOFormat.BIN = SVIOFormat("BIN", 0)
    SVIOFormat.XML = SVIOFormat("XML", 1)
    SVIOFormat.JSON = SVIOFormat("JSON", 2)
    SVIOFormat.TEXT = SVIOFormat("TEXT", 3)
    SVIOFormat._enumerators = { 0:SVIOFormat.BIN, 1:SVIOFormat.XML, 2:SVIOFormat.JSON, 3:SVIOFormat.TEXT }

    _M_Vistek.Data._t_SVIOFormat = IcePy.defineEnum('::Vistek::Data::SVIOFormat', SVIOFormat, (), SVIOFormat._enumerators)

    _M_Vistek.Data.SVIOFormat = SVIOFormat
    del SVIOFormat

if 'DeviceCategoryFlags' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DeviceCategoryFlags = Ice.createTempClass()
    class DeviceCategoryFlags(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceCategoryFlags.DeviceCategoryNone = DeviceCategoryFlags("DeviceCategoryNone", 0)
    DeviceCategoryFlags.DeviceCategoryIsSysDevice = DeviceCategoryFlags("DeviceCategoryIsSysDevice", 1)
    DeviceCategoryFlags.DeviceCategoryRemoteConfig = DeviceCategoryFlags("DeviceCategoryRemoteConfig", 2)
    DeviceCategoryFlags.DeviceCategoryHasRealtimeStream = DeviceCategoryFlags("DeviceCategoryHasRealtimeStream", 4)
    DeviceCategoryFlags.DeviceCategoryHasPlaybackStream = DeviceCategoryFlags("DeviceCategoryHasPlaybackStream", 8)
    DeviceCategoryFlags.DeviceCategoryCanStorage = DeviceCategoryFlags("DeviceCategoryCanStorage", 16)
    DeviceCategoryFlags.DeviceCategoryHasAlarmIN = DeviceCategoryFlags("DeviceCategoryHasAlarmIN", 32)
    DeviceCategoryFlags.DeviceCategoryHasAlarmOUT = DeviceCategoryFlags("DeviceCategoryHasAlarmOUT", 64)
    DeviceCategoryFlags.DeviceCategoryHasBayonet = DeviceCategoryFlags("DeviceCategoryHasBayonet", 128)
    DeviceCategoryFlags._enumerators = { 0:DeviceCategoryFlags.DeviceCategoryNone, 1:DeviceCategoryFlags.DeviceCategoryIsSysDevice, 2:DeviceCategoryFlags.DeviceCategoryRemoteConfig, 4:DeviceCategoryFlags.DeviceCategoryHasRealtimeStream, 8:DeviceCategoryFlags.DeviceCategoryHasPlaybackStream, 16:DeviceCategoryFlags.DeviceCategoryCanStorage, 32:DeviceCategoryFlags.DeviceCategoryHasAlarmIN, 64:DeviceCategoryFlags.DeviceCategoryHasAlarmOUT, 128:DeviceCategoryFlags.DeviceCategoryHasBayonet }

    _M_Vistek.Data._t_DeviceCategoryFlags = IcePy.defineEnum('::Vistek::Data::DeviceCategoryFlags', DeviceCategoryFlags, (), DeviceCategoryFlags._enumerators)

    _M_Vistek.Data.DeviceCategoryFlags = DeviceCategoryFlags
    del DeviceCategoryFlags

if 'DataChangeTypes' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataChangeTypes = Ice.createTempClass()
    class DataChangeTypes(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DataChangeTypes.NoneChanged = DataChangeTypes("NoneChanged", 0)
    DataChangeTypes.DataAdded = DataChangeTypes("DataAdded", 1)
    DataChangeTypes.DataModified = DataChangeTypes("DataModified", 2)
    DataChangeTypes.DataRemoved = DataChangeTypes("DataRemoved", 3)
    DataChangeTypes._enumerators = { 0:DataChangeTypes.NoneChanged, 1:DataChangeTypes.DataAdded, 2:DataChangeTypes.DataModified, 3:DataChangeTypes.DataRemoved }

    _M_Vistek.Data._t_DataChangeTypes = IcePy.defineEnum('::Vistek::Data::DataChangeTypes', DataChangeTypes, (), DataChangeTypes._enumerators)

    _M_Vistek.Data.DataChangeTypes = DataChangeTypes
    del DataChangeTypes

if 'StorageModes' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.StorageModes = Ice.createTempClass()
    class StorageModes(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    StorageModes.ByPrioirity = StorageModes("ByPrioirity", 0)
    StorageModes.BySize = StorageModes("BySize", 1)
    StorageModes._enumerators = { 0:StorageModes.ByPrioirity, 1:StorageModes.BySize }

    _M_Vistek.Data._t_StorageModes = IcePy.defineEnum('::Vistek::Data::StorageModes', StorageModes, (), StorageModes._enumerators)

    _M_Vistek.Data.StorageModes = StorageModes
    del StorageModes

if 'DeviceStatus' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DeviceStatus = Ice.createTempClass()
    class DeviceStatus(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceStatus.dstsOK = DeviceStatus("dstsOK", 0)
    DeviceStatus.dstsOFFLINE = DeviceStatus("dstsOFFLINE", 1)
    DeviceStatus.dstsERROR = DeviceStatus("dstsERROR", 2)
    DeviceStatus._enumerators = { 0:DeviceStatus.dstsOK, 1:DeviceStatus.dstsOFFLINE, 2:DeviceStatus.dstsERROR }

    _M_Vistek.Data._t_DeviceStatus = IcePy.defineEnum('::Vistek::Data::DeviceStatus', DeviceStatus, (), DeviceStatus._enumerators)

    _M_Vistek.Data.DeviceStatus = DeviceStatus
    del DeviceStatus

if 'DomainSite' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DomainSite = Ice.createTempClass()
    class DomainSite(Ice.Object):
        def __init__(self, ID='', SiteCode='', SiteName='', ParentID=''):
            self.ID = ID
            self.SiteCode = SiteCode
            self.SiteName = SiteName
            self.ParentID = ParentID

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DomainSite')

        def ice_id(self, current=None):
            return '::Vistek::Data::DomainSite'

        def ice_staticId():
            return '::Vistek::Data::DomainSite'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DomainSite)

        __repr__ = __str__

    _M_Vistek.Data.DomainSitePrx = Ice.createTempClass()
    class DomainSitePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DomainSitePrx.ice_checkedCast(proxy, '::Vistek::Data::DomainSite', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DomainSitePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DomainSite'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DomainSitePrx = IcePy.defineProxy('::Vistek::Data::DomainSite', DomainSitePrx)

    _M_Vistek.Data._t_DomainSite = IcePy.defineClass('::Vistek::Data::DomainSite', DomainSite, -1, (), False, False, None, (), (
        ('ID', (), IcePy._t_string, False, 0),
        ('SiteCode', (), IcePy._t_string, False, 0),
        ('SiteName', (), IcePy._t_string, False, 0),
        ('ParentID', (), IcePy._t_string, False, 0)
    ))
    DomainSite._ice_type = _M_Vistek.Data._t_DomainSite

    _M_Vistek.Data.DomainSite = DomainSite
    del DomainSite

    _M_Vistek.Data.DomainSitePrx = DomainSitePrx
    del DomainSitePrx

if 'DmDevice' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmDevice = IcePy.declareClass('::Vistek::Data::DmDevice')
    _M_Vistek.Data._t_DmDevicePrx = IcePy.declareProxy('::Vistek::Data::DmDevice')

if 'DmStorage' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmStorage = Ice.createTempClass()
    class DmStorage(Ice.Object):
        def __init__(self, ID='', ServiceID='', DeviceID='', Channel=0, Stream=0, StorageMode=_M_Vistek.Data.StorageModes.ByPrioirity, StorageParam=0, Schedule='', Device=None):
            self.ID = ID
            self.ServiceID = ServiceID
            self.DeviceID = DeviceID
            self.Channel = Channel
            self.Stream = Stream
            self.StorageMode = StorageMode
            self.StorageParam = StorageParam
            self.Schedule = Schedule
            self.Device = Device

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmStorage')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmStorage'

        def ice_staticId():
            return '::Vistek::Data::DmStorage'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmStorage)

        __repr__ = __str__

    _M_Vistek.Data.DmStoragePrx = Ice.createTempClass()
    class DmStoragePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmStoragePrx.ice_checkedCast(proxy, '::Vistek::Data::DmStorage', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmStoragePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmStorage'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmStoragePrx = IcePy.defineProxy('::Vistek::Data::DmStorage', DmStoragePrx)

    _M_Vistek.Data._t_DmStorage = IcePy.declareClass('::Vistek::Data::DmStorage')

    _M_Vistek.Data._t_DmStorage = IcePy.defineClass('::Vistek::Data::DmStorage', DmStorage, -1, (), False, False, None, (), (
        ('ID', (), IcePy._t_string, False, 0),
        ('ServiceID', (), IcePy._t_string, False, 0),
        ('DeviceID', (), IcePy._t_string, False, 0),
        ('Channel', (), IcePy._t_int, False, 0),
        ('Stream', (), IcePy._t_int, False, 0),
        ('StorageMode', (), _M_Vistek.Data._t_StorageModes, False, 0),
        ('StorageParam', (), IcePy._t_long, False, 0),
        ('Schedule', (), IcePy._t_string, False, 0),
        ('Device', (), _M_Vistek.Data._t_DmDevice, False, 0)
    ))
    DmStorage._ice_type = _M_Vistek.Data._t_DmStorage

    _M_Vistek.Data.DmStorage = DmStorage
    del DmStorage

    _M_Vistek.Data.DmStoragePrx = DmStoragePrx
    del DmStoragePrx

if '_t_DmStorageList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmStorageList = IcePy.defineSequence('::Vistek::Data::DmStorageList', (), _M_Vistek.Data._t_DmStorage)

if 'DmDeviceCategory' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmDeviceCategory = Ice.createTempClass()
    class DmDeviceCategory(Ice.Object):
        def __init__(self, CategoryID='', CategoryCode='', CategoryName='', BasicFlag=0):
            self.CategoryID = CategoryID
            self.CategoryCode = CategoryCode
            self.CategoryName = CategoryName
            self.BasicFlag = BasicFlag

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmDeviceCategory')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmDeviceCategory'

        def ice_staticId():
            return '::Vistek::Data::DmDeviceCategory'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmDeviceCategory)

        __repr__ = __str__

    _M_Vistek.Data.DmDeviceCategoryPrx = Ice.createTempClass()
    class DmDeviceCategoryPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmDeviceCategoryPrx.ice_checkedCast(proxy, '::Vistek::Data::DmDeviceCategory', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmDeviceCategoryPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmDeviceCategory'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmDeviceCategoryPrx = IcePy.defineProxy('::Vistek::Data::DmDeviceCategory', DmDeviceCategoryPrx)

    _M_Vistek.Data._t_DmDeviceCategory = IcePy.defineClass('::Vistek::Data::DmDeviceCategory', DmDeviceCategory, -1, (), False, False, None, (), (
        ('CategoryID', (), IcePy._t_string, False, 0),
        ('CategoryCode', (), IcePy._t_string, False, 0),
        ('CategoryName', (), IcePy._t_string, False, 0),
        ('BasicFlag', (), IcePy._t_int, False, 0)
    ))
    DmDeviceCategory._ice_type = _M_Vistek.Data._t_DmDeviceCategory

    _M_Vistek.Data.DmDeviceCategory = DmDeviceCategory
    del DmDeviceCategory

    _M_Vistek.Data.DmDeviceCategoryPrx = DmDeviceCategoryPrx
    del DmDeviceCategoryPrx

if 'DmGroup' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmGroup = Ice.createTempClass()
    class DmGroup(Ice.Object):
        def __init__(self, GroupID='', GroupName='', GroupParentID='', GroupIndex=0, GroupParentIndex=0, ExtensionID='', ParentExtensionID=''):
            self.GroupID = GroupID
            self.GroupName = GroupName
            self.GroupParentID = GroupParentID
            self.GroupIndex = GroupIndex
            self.GroupParentIndex = GroupParentIndex
            self.ExtensionID = ExtensionID
            self.ParentExtensionID = ParentExtensionID

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmGroup')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmGroup'

        def ice_staticId():
            return '::Vistek::Data::DmGroup'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmGroup)

        __repr__ = __str__

    _M_Vistek.Data.DmGroupPrx = Ice.createTempClass()
    class DmGroupPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmGroupPrx.ice_checkedCast(proxy, '::Vistek::Data::DmGroup', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmGroupPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmGroup'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmGroupPrx = IcePy.defineProxy('::Vistek::Data::DmGroup', DmGroupPrx)

    _M_Vistek.Data._t_DmGroup = IcePy.defineClass('::Vistek::Data::DmGroup', DmGroup, -1, (), False, False, None, (), (
        ('GroupID', (), IcePy._t_string, False, 0),
        ('GroupName', (), IcePy._t_string, False, 0),
        ('GroupParentID', (), IcePy._t_string, False, 0),
        ('GroupIndex', (), IcePy._t_long, False, 0),
        ('GroupParentIndex', (), IcePy._t_long, False, 0),
        ('ExtensionID', (), IcePy._t_string, False, 0),
        ('ParentExtensionID', (), IcePy._t_string, False, 0)
    ))
    DmGroup._ice_type = _M_Vistek.Data._t_DmGroup

    _M_Vistek.Data.DmGroup = DmGroup
    del DmGroup

    _M_Vistek.Data.DmGroupPrx = DmGroupPrx
    del DmGroupPrx

if '_t_DmGroupList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmGroupList = IcePy.defineSequence('::Vistek::Data::DmGroupList', (), _M_Vistek.Data._t_DmGroup)

if 'DmDevice2Group' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmDevice2Group = Ice.createTempClass()
    class DmDevice2Group(Ice.Object):
        def __init__(self, DeviceID='', DeviceChannelIndex=0, GroupID='', GroupIndex=0):
            self.DeviceID = DeviceID
            self.DeviceChannelIndex = DeviceChannelIndex
            self.GroupID = GroupID
            self.GroupIndex = GroupIndex

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmDevice2Group')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmDevice2Group'

        def ice_staticId():
            return '::Vistek::Data::DmDevice2Group'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmDevice2Group)

        __repr__ = __str__

    _M_Vistek.Data.DmDevice2GroupPrx = Ice.createTempClass()
    class DmDevice2GroupPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmDevice2GroupPrx.ice_checkedCast(proxy, '::Vistek::Data::DmDevice2Group', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmDevice2GroupPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmDevice2Group'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmDevice2GroupPrx = IcePy.defineProxy('::Vistek::Data::DmDevice2Group', DmDevice2GroupPrx)

    _M_Vistek.Data._t_DmDevice2Group = IcePy.defineClass('::Vistek::Data::DmDevice2Group', DmDevice2Group, -1, (), False, False, None, (), (
        ('DeviceID', (), IcePy._t_string, False, 0),
        ('DeviceChannelIndex', (), IcePy._t_int, False, 0),
        ('GroupID', (), IcePy._t_string, False, 0),
        ('GroupIndex', (), IcePy._t_long, False, 0)
    ))
    DmDevice2Group._ice_type = _M_Vistek.Data._t_DmDevice2Group

    _M_Vistek.Data.DmDevice2Group = DmDevice2Group
    del DmDevice2Group

    _M_Vistek.Data.DmDevice2GroupPrx = DmDevice2GroupPrx
    del DmDevice2GroupPrx

if '_t_DmDevice2GroupList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmDevice2GroupList = IcePy.defineSequence('::Vistek::Data::DmDevice2GroupList', (), _M_Vistek.Data._t_DmDevice2Group)

if 'DmDeviceVideoChannel' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmDeviceVideoChannel = Ice.createTempClass()
    class DmDeviceVideoChannel(Ice.Object):
        def __init__(self, DeviceID='', ChannelIndex=0, SystemID='', Name='', IsPTZEnabled=False, DeviceIndex=0, GroupIndex=0, ExtensionID='', Latitude=0.0, Longitude=0.0):
            self.DeviceID = DeviceID
            self.ChannelIndex = ChannelIndex
            self.SystemID = SystemID
            self.Name = Name
            self.IsPTZEnabled = IsPTZEnabled
            self.DeviceIndex = DeviceIndex
            self.GroupIndex = GroupIndex
            self.ExtensionID = ExtensionID
            self.Latitude = Latitude
            self.Longitude = Longitude

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmDeviceVideoChannel')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmDeviceVideoChannel'

        def ice_staticId():
            return '::Vistek::Data::DmDeviceVideoChannel'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmDeviceVideoChannel)

        __repr__ = __str__

    _M_Vistek.Data.DmDeviceVideoChannelPrx = Ice.createTempClass()
    class DmDeviceVideoChannelPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmDeviceVideoChannelPrx.ice_checkedCast(proxy, '::Vistek::Data::DmDeviceVideoChannel', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmDeviceVideoChannelPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmDeviceVideoChannel'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmDeviceVideoChannelPrx = IcePy.defineProxy('::Vistek::Data::DmDeviceVideoChannel', DmDeviceVideoChannelPrx)

    _M_Vistek.Data._t_DmDeviceVideoChannel = IcePy.defineClass('::Vistek::Data::DmDeviceVideoChannel', DmDeviceVideoChannel, -1, (), False, False, None, (), (
        ('DeviceID', (), IcePy._t_string, False, 0),
        ('ChannelIndex', (), IcePy._t_int, False, 0),
        ('SystemID', (), IcePy._t_string, False, 0),
        ('Name', (), IcePy._t_string, False, 0),
        ('IsPTZEnabled', (), IcePy._t_bool, False, 0),
        ('DeviceIndex', (), IcePy._t_long, False, 0),
        ('GroupIndex', (), IcePy._t_long, False, 0),
        ('ExtensionID', (), IcePy._t_string, False, 0),
        ('Latitude', (), IcePy._t_double, False, 0),
        ('Longitude', (), IcePy._t_double, False, 0)
    ))
    DmDeviceVideoChannel._ice_type = _M_Vistek.Data._t_DmDeviceVideoChannel

    _M_Vistek.Data.DmDeviceVideoChannel = DmDeviceVideoChannel
    del DmDeviceVideoChannel

    _M_Vistek.Data.DmDeviceVideoChannelPrx = DmDeviceVideoChannelPrx
    del DmDeviceVideoChannelPrx

if '_t_DmDeviceVideoChannelList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmDeviceVideoChannelList = IcePy.defineSequence('::Vistek::Data::DmDeviceVideoChannelList', (), _M_Vistek.Data._t_DmDeviceVideoChannel)

if 'AsRule' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_AsRule = IcePy.declareClass('::Vistek::Data::AsRule')
    _M_Vistek.Data._t_AsRulePrx = IcePy.declareProxy('::Vistek::Data::AsRule')

if '_t_AsRuleList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_AsRuleList = IcePy.defineSequence('::Vistek::Data::AsRuleList', (), _M_Vistek.Data._t_AsRule)

if 'DmPlatformManufacture' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmPlatformManufacture = Ice.createTempClass()
    class DmPlatformManufacture(Ice.Object):
        def __init__(self, Code='', Name='', DefaultUsername='', DefaultPassword='', Extension=''):
            self.Code = Code
            self.Name = Name
            self.DefaultUsername = DefaultUsername
            self.DefaultPassword = DefaultPassword
            self.Extension = Extension

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmPlatformManufacture')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmPlatformManufacture'

        def ice_staticId():
            return '::Vistek::Data::DmPlatformManufacture'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmPlatformManufacture)

        __repr__ = __str__

    _M_Vistek.Data.DmPlatformManufacturePrx = Ice.createTempClass()
    class DmPlatformManufacturePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmPlatformManufacturePrx.ice_checkedCast(proxy, '::Vistek::Data::DmPlatformManufacture', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmPlatformManufacturePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmPlatformManufacture'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmPlatformManufacturePrx = IcePy.defineProxy('::Vistek::Data::DmPlatformManufacture', DmPlatformManufacturePrx)

    _M_Vistek.Data._t_DmPlatformManufacture = IcePy.defineClass('::Vistek::Data::DmPlatformManufacture', DmPlatformManufacture, -1, (), False, False, None, (), (
        ('Code', (), IcePy._t_string, False, 0),
        ('Name', (), IcePy._t_string, False, 0),
        ('DefaultUsername', (), IcePy._t_string, False, 0),
        ('DefaultPassword', (), IcePy._t_string, False, 0),
        ('Extension', (), IcePy._t_string, False, 0)
    ))
    DmPlatformManufacture._ice_type = _M_Vistek.Data._t_DmPlatformManufacture

    _M_Vistek.Data.DmPlatformManufacture = DmPlatformManufacture
    del DmPlatformManufacture

    _M_Vistek.Data.DmPlatformManufacturePrx = DmPlatformManufacturePrx
    del DmPlatformManufacturePrx

if 'DmPlatformRedirection' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmPlatformRedirection = Ice.createTempClass()
    class DmPlatformRedirection(Ice.Object):
        def __init__(self, PlatformID='', Protocol='', Category='', CategoryName='', IP='', Port=0, Username='', Password=''):
            self.PlatformID = PlatformID
            self.Protocol = Protocol
            self.Category = Category
            self.CategoryName = CategoryName
            self.IP = IP
            self.Port = Port
            self.Username = Username
            self.Password = Password

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmPlatformRedirection')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmPlatformRedirection'

        def ice_staticId():
            return '::Vistek::Data::DmPlatformRedirection'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmPlatformRedirection)

        __repr__ = __str__

    _M_Vistek.Data.DmPlatformRedirectionPrx = Ice.createTempClass()
    class DmPlatformRedirectionPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmPlatformRedirectionPrx.ice_checkedCast(proxy, '::Vistek::Data::DmPlatformRedirection', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmPlatformRedirectionPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmPlatformRedirection'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmPlatformRedirectionPrx = IcePy.defineProxy('::Vistek::Data::DmPlatformRedirection', DmPlatformRedirectionPrx)

    _M_Vistek.Data._t_DmPlatformRedirection = IcePy.defineClass('::Vistek::Data::DmPlatformRedirection', DmPlatformRedirection, -1, (), False, False, None, (), (
        ('PlatformID', (), IcePy._t_string, False, 0),
        ('Protocol', (), IcePy._t_string, False, 0),
        ('Category', (), IcePy._t_string, False, 0),
        ('CategoryName', (), IcePy._t_string, False, 0),
        ('IP', (), IcePy._t_string, False, 0),
        ('Port', (), IcePy._t_int, False, 0),
        ('Username', (), IcePy._t_string, False, 0),
        ('Password', (), IcePy._t_string, False, 0)
    ))
    DmPlatformRedirection._ice_type = _M_Vistek.Data._t_DmPlatformRedirection

    _M_Vistek.Data.DmPlatformRedirection = DmPlatformRedirection
    del DmPlatformRedirection

    _M_Vistek.Data.DmPlatformRedirectionPrx = DmPlatformRedirectionPrx
    del DmPlatformRedirectionPrx

if '_t_DmPlatformRedirectionList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmPlatformRedirectionList = IcePy.defineSequence('::Vistek::Data::DmPlatformRedirectionList', (), _M_Vistek.Data._t_DmPlatformRedirection)

if 'DmPlatform' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmPlatform = Ice.createTempClass()
    class DmPlatform(Ice.Object):
        def __init__(self, ID='', Code='', Name='', Version='', ManufactureCode='', IP='', IPVer=0, Port=0, Username='', Password='', Status=0, SiteID='', Extension='', ChangedDtTm='', ProtocolHeader='', Manufacture=None, RedirectionList=Ice.Unset):
            self.ID = ID
            self.Code = Code
            self.Name = Name
            self.Version = Version
            self.ManufactureCode = ManufactureCode
            self.IP = IP
            self.IPVer = IPVer
            self.Port = Port
            self.Username = Username
            self.Password = Password
            self.Status = Status
            self.SiteID = SiteID
            self.Extension = Extension
            self.ChangedDtTm = ChangedDtTm
            self.ProtocolHeader = ProtocolHeader
            self.Manufacture = Manufacture
            self.RedirectionList = RedirectionList

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmPlatform')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmPlatform'

        def ice_staticId():
            return '::Vistek::Data::DmPlatform'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmPlatform)

        __repr__ = __str__

    _M_Vistek.Data.DmPlatformPrx = Ice.createTempClass()
    class DmPlatformPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmPlatformPrx.ice_checkedCast(proxy, '::Vistek::Data::DmPlatform', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmPlatformPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmPlatform'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmPlatformPrx = IcePy.defineProxy('::Vistek::Data::DmPlatform', DmPlatformPrx)

    _M_Vistek.Data._t_DmPlatform = IcePy.declareClass('::Vistek::Data::DmPlatform')

    _M_Vistek.Data._t_DmPlatform = IcePy.defineClass('::Vistek::Data::DmPlatform', DmPlatform, -1, (), False, False, None, (), (
        ('ID', (), IcePy._t_string, False, 0),
        ('Code', (), IcePy._t_string, False, 0),
        ('Name', (), IcePy._t_string, False, 0),
        ('Version', (), IcePy._t_string, False, 0),
        ('ManufactureCode', (), IcePy._t_string, False, 0),
        ('IP', (), IcePy._t_string, False, 0),
        ('IPVer', (), IcePy._t_int, False, 0),
        ('Port', (), IcePy._t_int, False, 0),
        ('Username', (), IcePy._t_string, False, 0),
        ('Password', (), IcePy._t_string, False, 0),
        ('Status', (), IcePy._t_int, False, 0),
        ('SiteID', (), IcePy._t_string, False, 0),
        ('Extension', (), IcePy._t_string, False, 0),
        ('ChangedDtTm', (), IcePy._t_string, False, 0),
        ('ProtocolHeader', (), IcePy._t_string, False, 0),
        ('Manufacture', (), _M_Vistek.Data._t_DmPlatformManufacture, False, 0),
        ('RedirectionList', (), _M_Vistek.Data._t_DmPlatformRedirectionList, True, 1)
    ))
    DmPlatform._ice_type = _M_Vistek.Data._t_DmPlatform

    _M_Vistek.Data.DmPlatform = DmPlatform
    del DmPlatform

    _M_Vistek.Data.DmPlatformPrx = DmPlatformPrx
    del DmPlatformPrx

if '_t_DmPlatformList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmPlatformList = IcePy.defineSequence('::Vistek::Data::DmPlatformList', (), _M_Vistek.Data._t_DmPlatform)

if 'DmDevice' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmDevice = Ice.createTempClass()
    class DmDevice(Ice.Object):
        def __init__(self, DeviceID='', DeviceName='', Manufacture='', Extension='', ParentID='', SiteID='', Code='', IP='', Port=0, Username='', Password='', ProtocolFlag=0, PlatformID='', ChangedDateTime='', ExtensionID='', SystemID='', Latitude=0.0, Longitude=0.0, Status=0, DeviceCategory=None, StorageList=None, ChannelList=None, RuleList=None, Platform=None, reserved=""):
            self.DeviceID = DeviceID
            self.DeviceName = DeviceName
            self.Manufacture = Manufacture
            self.Extension = Extension
            self.ParentID = ParentID
            self.SiteID = SiteID
            self.Code = Code
            self.IP = IP
            self.Port = Port
            self.Username = Username
            self.Password = Password
            self.ProtocolFlag = ProtocolFlag
            self.PlatformID = PlatformID
            self.ChangedDateTime = ChangedDateTime
            self.ExtensionID = ExtensionID
            self.SystemID = SystemID
            self.Latitude = Latitude
            self.Longitude = Longitude
            self.Status = Status
            self.DeviceCategory = DeviceCategory
            self.StorageList = StorageList
            self.ChannelList = ChannelList
            self.RuleList = RuleList
            self.Platform = Platform
            self.reserved = reserved

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmDevice')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmDevice'

        def ice_staticId():
            return '::Vistek::Data::DmDevice'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmDevice)

        __repr__ = __str__

    _M_Vistek.Data.DmDevicePrx = Ice.createTempClass()
    class DmDevicePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmDevicePrx.ice_checkedCast(proxy, '::Vistek::Data::DmDevice', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmDevicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmDevice'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmDevicePrx = IcePy.defineProxy('::Vistek::Data::DmDevice', DmDevicePrx)

    _M_Vistek.Data._t_DmDevice = IcePy.defineClass('::Vistek::Data::DmDevice', DmDevice, -1, (), False, False, None, (), (
        ('DeviceID', (), IcePy._t_string, False, 0),
        ('DeviceName', (), IcePy._t_string, False, 0),
        ('Manufacture', (), IcePy._t_string, False, 0),
        ('Extension', (), IcePy._t_string, False, 0),
        ('ParentID', (), IcePy._t_string, False, 0),
        ('SiteID', (), IcePy._t_string, False, 0),
        ('Code', (), IcePy._t_string, False, 0),
        ('IP', (), IcePy._t_string, False, 0),
        ('Port', (), IcePy._t_int, False, 0),
        ('Username', (), IcePy._t_string, False, 0),
        ('Password', (), IcePy._t_string, False, 0),
        ('ProtocolFlag', (), IcePy._t_int, False, 0),
        ('PlatformID', (), IcePy._t_string, False, 0),
        ('ChangedDateTime', (), IcePy._t_string, False, 0),
        ('ExtensionID', (), IcePy._t_string, False, 0),
        ('SystemID', (), IcePy._t_string, False, 0),
        ('Latitude', (), IcePy._t_double, False, 0),
        ('Longitude', (), IcePy._t_double, False, 0),
        ('Status', (), IcePy._t_int, False, 0),
        ('DeviceCategory', (), _M_Vistek.Data._t_DmDeviceCategory, False, 0),
        ('StorageList', (), _M_Vistek.Data._t_DmStorageList, False, 0),
        ('ChannelList', (), _M_Vistek.Data._t_DmDeviceVideoChannelList, False, 0),
        ('RuleList', (), _M_Vistek.Data._t_AsRuleList, False, 0),
        ('Platform', (), _M_Vistek.Data._t_DmPlatform, False, 0),
        ('reserved', (), IcePy._t_string, True, 1)
    ))
    DmDevice._ice_type = _M_Vistek.Data._t_DmDevice

    _M_Vistek.Data.DmDevice = DmDevice
    del DmDevice

    _M_Vistek.Data.DmDevicePrx = DmDevicePrx
    del DmDevicePrx

if '_t_DmDeviceList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmDeviceList = IcePy.defineSequence('::Vistek::Data::DmDeviceList', (), _M_Vistek.Data._t_DmDevice)

if 'DmServiceType' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmServiceType = Ice.createTempClass()
    class DmServiceType(Ice.Object):
        def __init__(self, ServiceTypeCode='', ServiceTypeName='', ConfigSchema=''):
            self.ServiceTypeCode = ServiceTypeCode
            self.ServiceTypeName = ServiceTypeName
            self.ConfigSchema = ConfigSchema

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmServiceType')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmServiceType'

        def ice_staticId():
            return '::Vistek::Data::DmServiceType'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmServiceType)

        __repr__ = __str__

    _M_Vistek.Data.DmServiceTypePrx = Ice.createTempClass()
    class DmServiceTypePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmServiceTypePrx.ice_checkedCast(proxy, '::Vistek::Data::DmServiceType', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmServiceTypePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmServiceType'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmServiceTypePrx = IcePy.defineProxy('::Vistek::Data::DmServiceType', DmServiceTypePrx)

    _M_Vistek.Data._t_DmServiceType = IcePy.defineClass('::Vistek::Data::DmServiceType', DmServiceType, -1, (), False, False, None, (), (
        ('ServiceTypeCode', (), IcePy._t_string, False, 0),
        ('ServiceTypeName', (), IcePy._t_string, False, 0),
        ('ConfigSchema', (), IcePy._t_string, False, 0)
    ))
    DmServiceType._ice_type = _M_Vistek.Data._t_DmServiceType

    _M_Vistek.Data.DmServiceType = DmServiceType
    del DmServiceType

    _M_Vistek.Data.DmServiceTypePrx = DmServiceTypePrx
    del DmServiceTypePrx

if 'DmService' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DmService = Ice.createTempClass()
    class DmService(Ice.Object):
        def __init__(self, ServiceID='', ServerID='', ServiceTypeCode='', ServiceName='', ServiceIP='', ServicePort=0, SiteID='', Config='', ChangedDateTime='', TimeStampTicks=0, ServerInfo=None, ServiceType=None, Site=None):
            self.ServiceID = ServiceID
            self.ServerID = ServerID
            self.ServiceTypeCode = ServiceTypeCode
            self.ServiceName = ServiceName
            self.ServiceIP = ServiceIP
            self.ServicePort = ServicePort
            self.SiteID = SiteID
            self.Config = Config
            self.ChangedDateTime = ChangedDateTime
            self.TimeStampTicks = TimeStampTicks
            self.ServerInfo = ServerInfo
            self.ServiceType = ServiceType
            self.Site = Site

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DmService')

        def ice_id(self, current=None):
            return '::Vistek::Data::DmService'

        def ice_staticId():
            return '::Vistek::Data::DmService'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DmService)

        __repr__ = __str__

    _M_Vistek.Data.DmServicePrx = Ice.createTempClass()
    class DmServicePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DmServicePrx.ice_checkedCast(proxy, '::Vistek::Data::DmService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DmServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DmService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DmServicePrx = IcePy.defineProxy('::Vistek::Data::DmService', DmServicePrx)

    _M_Vistek.Data._t_DmService = IcePy.declareClass('::Vistek::Data::DmService')

    _M_Vistek.Data._t_DmService = IcePy.defineClass('::Vistek::Data::DmService', DmService, -1, (), False, False, None, (), (
        ('ServiceID', (), IcePy._t_string, False, 0),
        ('ServerID', (), IcePy._t_string, False, 0),
        ('ServiceTypeCode', (), IcePy._t_string, False, 0),
        ('ServiceName', (), IcePy._t_string, False, 0),
        ('ServiceIP', (), IcePy._t_string, False, 0),
        ('ServicePort', (), IcePy._t_int, False, 0),
        ('SiteID', (), IcePy._t_string, False, 0),
        ('Config', (), IcePy._t_string, False, 0),
        ('ChangedDateTime', (), IcePy._t_string, False, 0),
        ('TimeStampTicks', (), IcePy._t_long, False, 0),
        ('ServerInfo', (), _M_Vistek.Data._t_DmDevice, False, 0),
        ('ServiceType', (), _M_Vistek.Data._t_DmServiceType, False, 0),
        ('Site', (), _M_Vistek.Data._t_DomainSite, False, 0)
    ))
    DmService._ice_type = _M_Vistek.Data._t_DmService

    _M_Vistek.Data.DmService = DmService
    del DmService

    _M_Vistek.Data.DmServicePrx = DmServicePrx
    del DmServicePrx

if '_t_DmServiceList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DmServiceList = IcePy.defineSequence('::Vistek::Data::DmServiceList', (), _M_Vistek.Data._t_DmService)

if 'DeviceChannelType' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DeviceChannelType = Ice.createTempClass()
    class DeviceChannelType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DeviceChannelType.ctVIDEO = DeviceChannelType("ctVIDEO", 0)
    DeviceChannelType.ctALARM = DeviceChannelType("ctALARM", 1)
    DeviceChannelType.ctBAYONET = DeviceChannelType("ctBAYONET", 2)
    DeviceChannelType._enumerators = { 0:DeviceChannelType.ctVIDEO, 1:DeviceChannelType.ctALARM, 2:DeviceChannelType.ctBAYONET }

    _M_Vistek.Data._t_DeviceChannelType = IcePy.defineEnum('::Vistek::Data::DeviceChannelType', DeviceChannelType, (), DeviceChannelType._enumerators)

    _M_Vistek.Data.DeviceChannelType = DeviceChannelType
    del DeviceChannelType

if 'AsEventSource' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_AsEventSource = IcePy.declareClass('::Vistek::Data::AsEventSource')
    _M_Vistek.Data._t_AsEventSourcePrx = IcePy.declareProxy('::Vistek::Data::AsEventSource')

if 'AsEventType' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.AsEventType = Ice.createTempClass()
    class AsEventType(Ice.Object):
        def __init__(self, ID='', Key='', Name='', Desc='', EventSourceType='', EventSource=None):
            self.ID = ID
            self.Key = Key
            self.Name = Name
            self.Desc = Desc
            self.EventSourceType = EventSourceType
            self.EventSource = EventSource

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::AsEventType')

        def ice_id(self, current=None):
            return '::Vistek::Data::AsEventType'

        def ice_staticId():
            return '::Vistek::Data::AsEventType'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_AsEventType)

        __repr__ = __str__

    _M_Vistek.Data.AsEventTypePrx = Ice.createTempClass()
    class AsEventTypePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.AsEventTypePrx.ice_checkedCast(proxy, '::Vistek::Data::AsEventType', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.AsEventTypePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::AsEventType'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_AsEventTypePrx = IcePy.defineProxy('::Vistek::Data::AsEventType', AsEventTypePrx)

    _M_Vistek.Data._t_AsEventType = IcePy.declareClass('::Vistek::Data::AsEventType')

    _M_Vistek.Data._t_AsEventType = IcePy.defineClass('::Vistek::Data::AsEventType', AsEventType, -1, (), False, False, None, (), (
        ('ID', (), IcePy._t_string, False, 0),
        ('Key', (), IcePy._t_string, False, 0),
        ('Name', (), IcePy._t_string, False, 0),
        ('Desc', (), IcePy._t_string, False, 0),
        ('EventSourceType', (), IcePy._t_string, False, 0),
        ('EventSource', (), _M_Vistek.Data._t_AsEventSource, False, 0)
    ))
    AsEventType._ice_type = _M_Vistek.Data._t_AsEventType

    _M_Vistek.Data.AsEventType = AsEventType
    del AsEventType

    _M_Vistek.Data.AsEventTypePrx = AsEventTypePrx
    del AsEventTypePrx

if '_t_AsEventTypeList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_AsEventTypeList = IcePy.defineSequence('::Vistek::Data::AsEventTypeList', (), _M_Vistek.Data._t_AsEventType)

if '_t_Binary' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_Binary = IcePy.defineSequence('::Vistek::Data::Binary', (), IcePy._t_byte)

if 'AsEventSource' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.AsEventSource = Ice.createTempClass()
    class AsEventSource(Ice.Object):
        def __init__(self, ID='', Name='', Desc='', AssemblyName='', InputTypeName='', InputFormat=0, OutputTypeName='', OutputFormat=0, AnalysisChannelType=_M_Vistek.Data.DeviceChannelType.ctVIDEO, ComputingOverhead=0, EventTypeList=None):
            self.ID = ID
            self.Name = Name
            self.Desc = Desc
            self.AssemblyName = AssemblyName
            self.InputTypeName = InputTypeName
            self.InputFormat = InputFormat
            self.OutputTypeName = OutputTypeName
            self.OutputFormat = OutputFormat
            self.AnalysisChannelType = AnalysisChannelType
            self.ComputingOverhead = ComputingOverhead
            self.EventTypeList = EventTypeList

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::AsEventSource')

        def ice_id(self, current=None):
            return '::Vistek::Data::AsEventSource'

        def ice_staticId():
            return '::Vistek::Data::AsEventSource'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_AsEventSource)

        __repr__ = __str__

    _M_Vistek.Data.AsEventSourcePrx = Ice.createTempClass()
    class AsEventSourcePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.AsEventSourcePrx.ice_checkedCast(proxy, '::Vistek::Data::AsEventSource', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.AsEventSourcePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::AsEventSource'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_AsEventSourcePrx = IcePy.defineProxy('::Vistek::Data::AsEventSource', AsEventSourcePrx)

    _M_Vistek.Data._t_AsEventSource = IcePy.defineClass('::Vistek::Data::AsEventSource', AsEventSource, -1, (), False, False, None, (), (
        ('ID', (), IcePy._t_string, False, 0),
        ('Name', (), IcePy._t_string, False, 0),
        ('Desc', (), IcePy._t_string, False, 0),
        ('AssemblyName', (), IcePy._t_string, False, 0),
        ('InputTypeName', (), IcePy._t_string, False, 0),
        ('InputFormat', (), IcePy._t_int, False, 0),
        ('OutputTypeName', (), IcePy._t_string, False, 0),
        ('OutputFormat', (), IcePy._t_int, False, 0),
        ('AnalysisChannelType', (), _M_Vistek.Data._t_DeviceChannelType, False, 0),
        ('ComputingOverhead', (), IcePy._t_int, False, 0),
        ('EventTypeList', (), _M_Vistek.Data._t_AsEventTypeList, False, 0)
    ))
    AsEventSource._ice_type = _M_Vistek.Data._t_AsEventSource

    _M_Vistek.Data.AsEventSource = AsEventSource
    del AsEventSource

    _M_Vistek.Data.AsEventSourcePrx = AsEventSourcePrx
    del AsEventSourcePrx

if '_t_AsEventSourceList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_AsEventSourceList = IcePy.defineSequence('::Vistek::Data::AsEventSourceList', (), _M_Vistek.Data._t_AsEventSource)

if 'AsRule' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.AsRule = Ice.createTempClass()
    class AsRule(Ice.Object):
        def __init__(self, ID='', Name='', DeviceID='', ChannelIndex=0, StreamIndex=0, ServiceID='', EventLevel=0, EventSourceID='', ConfigData=None, DrawingData='', Schedule='', IsActive=False, ChangedDateTime='', AnalysisService=None, EventSource=None):
            self.ID = ID
            self.Name = Name
            self.DeviceID = DeviceID
            self.ChannelIndex = ChannelIndex
            self.StreamIndex = StreamIndex
            self.ServiceID = ServiceID
            self.EventLevel = EventLevel
            self.EventSourceID = EventSourceID
            self.ConfigData = ConfigData
            self.DrawingData = DrawingData
            self.Schedule = Schedule
            self.IsActive = IsActive
            self.ChangedDateTime = ChangedDateTime
            self.AnalysisService = AnalysisService
            self.EventSource = EventSource

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::AsRule')

        def ice_id(self, current=None):
            return '::Vistek::Data::AsRule'

        def ice_staticId():
            return '::Vistek::Data::AsRule'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_AsRule)

        __repr__ = __str__

    _M_Vistek.Data.AsRulePrx = Ice.createTempClass()
    class AsRulePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.AsRulePrx.ice_checkedCast(proxy, '::Vistek::Data::AsRule', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.AsRulePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::AsRule'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_AsRulePrx = IcePy.defineProxy('::Vistek::Data::AsRule', AsRulePrx)

    _M_Vistek.Data._t_AsRule = IcePy.defineClass('::Vistek::Data::AsRule', AsRule, -1, (), False, False, None, (), (
        ('ID', (), IcePy._t_string, False, 0),
        ('Name', (), IcePy._t_string, False, 0),
        ('DeviceID', (), IcePy._t_string, False, 0),
        ('ChannelIndex', (), IcePy._t_int, False, 0),
        ('StreamIndex', (), IcePy._t_int, False, 0),
        ('ServiceID', (), IcePy._t_string, False, 0),
        ('EventLevel', (), IcePy._t_int, False, 0),
        ('EventSourceID', (), IcePy._t_string, False, 0),
        ('ConfigData', (), _M_Vistek.Data._t_Binary, False, 0),
        ('DrawingData', (), IcePy._t_string, False, 0),
        ('Schedule', (), IcePy._t_string, False, 0),
        ('IsActive', (), IcePy._t_bool, False, 0),
        ('ChangedDateTime', (), IcePy._t_string, False, 0),
        ('AnalysisService', (), _M_Vistek.Data._t_DmService, False, 0),
        ('EventSource', (), _M_Vistek.Data._t_AsEventSource, False, 0)
    ))
    AsRule._ice_type = _M_Vistek.Data._t_AsRule

    _M_Vistek.Data.AsRule = AsRule
    del AsRule

    _M_Vistek.Data.AsRulePrx = AsRulePrx
    del AsRulePrx

if 'TrafficCheckPointResult' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.TrafficCheckPointResult = Ice.createTempClass()
    class TrafficCheckPointResult(Ice.Object):
        def __init__(self, ChannelIndex=0, DateTime=0, DetectType=0, DeviceID='', Direction=0, DriveChan=0, ID='', IllegalType=0, IsAdjusted=False, License='', LicenseBelieve=0, LicenseCharBelieve='', LicenseLen=0, PlateColor=0, PlateType=0, VehicleColor=0, VehicleColorDepth=0, VehicleSpeed=0, VehicleType=0, LicenseX=0.0, LicenseY=0.0, LicenseW=0.0, LicenseH=0.0, LicenseImageData=None, OverallViewData=None):
            self.ChannelIndex = ChannelIndex
            self.DateTime = DateTime
            self.DetectType = DetectType
            self.DeviceID = DeviceID
            self.Direction = Direction
            self.DriveChan = DriveChan
            self.ID = ID
            self.IllegalType = IllegalType
            self.IsAdjusted = IsAdjusted
            self.License = License
            self.LicenseBelieve = LicenseBelieve
            self.LicenseCharBelieve = LicenseCharBelieve
            self.LicenseLen = LicenseLen
            self.PlateColor = PlateColor
            self.PlateType = PlateType
            self.VehicleColor = VehicleColor
            self.VehicleColorDepth = VehicleColorDepth
            self.VehicleSpeed = VehicleSpeed
            self.VehicleType = VehicleType
            self.LicenseX = LicenseX
            self.LicenseY = LicenseY
            self.LicenseW = LicenseW
            self.LicenseH = LicenseH
            self.LicenseImageData = LicenseImageData
            self.OverallViewData = OverallViewData

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::TrafficCheckPointResult')

        def ice_id(self, current=None):
            return '::Vistek::Data::TrafficCheckPointResult'

        def ice_staticId():
            return '::Vistek::Data::TrafficCheckPointResult'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_TrafficCheckPointResult)

        __repr__ = __str__

    _M_Vistek.Data.TrafficCheckPointResultPrx = Ice.createTempClass()
    class TrafficCheckPointResultPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.TrafficCheckPointResultPrx.ice_checkedCast(proxy, '::Vistek::Data::TrafficCheckPointResult', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.TrafficCheckPointResultPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::TrafficCheckPointResult'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_TrafficCheckPointResultPrx = IcePy.defineProxy('::Vistek::Data::TrafficCheckPointResult', TrafficCheckPointResultPrx)

    _M_Vistek.Data._t_TrafficCheckPointResult = IcePy.defineClass('::Vistek::Data::TrafficCheckPointResult', TrafficCheckPointResult, -1, (), False, False, None, (), (
        ('ChannelIndex', (), IcePy._t_int, False, 0),
        ('DateTime', (), IcePy._t_long, False, 0),
        ('DetectType', (), IcePy._t_int, False, 0),
        ('DeviceID', (), IcePy._t_string, False, 0),
        ('Direction', (), IcePy._t_int, False, 0),
        ('DriveChan', (), IcePy._t_int, False, 0),
        ('ID', (), IcePy._t_string, False, 0),
        ('IllegalType', (), IcePy._t_int, False, 0),
        ('IsAdjusted', (), IcePy._t_bool, False, 0),
        ('License', (), IcePy._t_string, False, 0),
        ('LicenseBelieve', (), IcePy._t_int, False, 0),
        ('LicenseCharBelieve', (), IcePy._t_string, False, 0),
        ('LicenseLen', (), IcePy._t_int, False, 0),
        ('PlateColor', (), IcePy._t_int, False, 0),
        ('PlateType', (), IcePy._t_int, False, 0),
        ('VehicleColor', (), IcePy._t_int, False, 0),
        ('VehicleColorDepth', (), IcePy._t_int, False, 0),
        ('VehicleSpeed', (), IcePy._t_int, False, 0),
        ('VehicleType', (), IcePy._t_int, False, 0),
        ('LicenseX', (), IcePy._t_float, False, 0),
        ('LicenseY', (), IcePy._t_float, False, 0),
        ('LicenseW', (), IcePy._t_float, False, 0),
        ('LicenseH', (), IcePy._t_float, False, 0),
        ('LicenseImageData', (), _M_Vistek.Data._t_Binary, False, 0),
        ('OverallViewData', (), _M_Vistek.Data._t_Binary, False, 0)
    ))
    TrafficCheckPointResult._ice_type = _M_Vistek.Data._t_TrafficCheckPointResult

    _M_Vistek.Data.TrafficCheckPointResult = TrafficCheckPointResult
    del TrafficCheckPointResult

    _M_Vistek.Data.TrafficCheckPointResultPrx = TrafficCheckPointResultPrx
    del TrafficCheckPointResultPrx

if 'AsEvent' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.AsEvent = Ice.createTempClass()
    class AsEvent(Ice.Object):
        def __init__(self, eventID='', ruleID='', startDT='', endDT='', eventTypeID='', siteID='', deviceID='', channelIndex=0, channelType=_M_Vistek.Data.DeviceChannelType.ctVIDEO, eventLevel=0, extention=''):
            self.eventID = eventID
            self.ruleID = ruleID
            self.startDT = startDT
            self.endDT = endDT
            self.eventTypeID = eventTypeID
            self.siteID = siteID
            self.deviceID = deviceID
            self.channelIndex = channelIndex
            self.channelType = channelType
            self.eventLevel = eventLevel
            self.extention = extention

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::AsEvent')

        def ice_id(self, current=None):
            return '::Vistek::Data::AsEvent'

        def ice_staticId():
            return '::Vistek::Data::AsEvent'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_AsEvent)

        __repr__ = __str__

    _M_Vistek.Data.AsEventPrx = Ice.createTempClass()
    class AsEventPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.AsEventPrx.ice_checkedCast(proxy, '::Vistek::Data::AsEvent', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.AsEventPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::AsEvent'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_AsEventPrx = IcePy.defineProxy('::Vistek::Data::AsEvent', AsEventPrx)

    _M_Vistek.Data._t_AsEvent = IcePy.defineClass('::Vistek::Data::AsEvent', AsEvent, -1, (), False, False, None, (), (
        ('eventID', (), IcePy._t_string, False, 0),
        ('ruleID', (), IcePy._t_string, False, 0),
        ('startDT', (), IcePy._t_string, False, 0),
        ('endDT', (), IcePy._t_string, False, 0),
        ('eventTypeID', (), IcePy._t_string, False, 0),
        ('siteID', (), IcePy._t_string, False, 0),
        ('deviceID', (), IcePy._t_string, False, 0),
        ('channelIndex', (), IcePy._t_int, False, 0),
        ('channelType', (), _M_Vistek.Data._t_DeviceChannelType, False, 0),
        ('eventLevel', (), IcePy._t_int, False, 0),
        ('extention', (), IcePy._t_string, False, 0)
    ))
    AsEvent._ice_type = _M_Vistek.Data._t_AsEvent

    _M_Vistek.Data.AsEvent = AsEvent
    del AsEvent

    _M_Vistek.Data.AsEventPrx = AsEventPrx
    del AsEventPrx

if 'ServiceMessage' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.ServiceMessage = Ice.createTempClass()
    class ServiceMessage(Ice.Object):
        def __init__(self, header='', body=''):
            self.header = header
            self.body = body

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::ServiceMessage')

        def ice_id(self, current=None):
            return '::Vistek::Data::ServiceMessage'

        def ice_staticId():
            return '::Vistek::Data::ServiceMessage'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_ServiceMessage)

        __repr__ = __str__

    _M_Vistek.Data.ServiceMessagePrx = Ice.createTempClass()
    class ServiceMessagePrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.ServiceMessagePrx.ice_checkedCast(proxy, '::Vistek::Data::ServiceMessage', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.ServiceMessagePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::ServiceMessage'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_ServiceMessagePrx = IcePy.defineProxy('::Vistek::Data::ServiceMessage', ServiceMessagePrx)

    _M_Vistek.Data._t_ServiceMessage = IcePy.defineClass('::Vistek::Data::ServiceMessage', ServiceMessage, -1, (), False, False, None, (), (
        ('header', (), IcePy._t_string, False, 0),
        ('body', (), IcePy._t_string, False, 0)
    ))
    ServiceMessage._ice_type = _M_Vistek.Data._t_ServiceMessage

    _M_Vistek.Data.ServiceMessage = ServiceMessage
    del ServiceMessage

    _M_Vistek.Data.ServiceMessagePrx = ServiceMessagePrx
    del ServiceMessagePrx

if 'DeviceStatusInfo' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DeviceStatusInfo = Ice.createTempClass()
    class DeviceStatusInfo(object):
        def __init__(self, DeviceID='', DeviceIndex=0, ChannelIndex=0, Status=0, ErrorCode=0):
            self.DeviceID = DeviceID
            self.DeviceIndex = DeviceIndex
            self.ChannelIndex = ChannelIndex
            self.Status = Status
            self.ErrorCode = ErrorCode

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.DeviceID)
            _h = 5 * _h + Ice.getHash(self.DeviceIndex)
            _h = 5 * _h + Ice.getHash(self.ChannelIndex)
            _h = 5 * _h + Ice.getHash(self.Status)
            _h = 5 * _h + Ice.getHash(self.ErrorCode)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_Vistek.Data.DeviceStatusInfo):
                return NotImplemented
            else:
                if self.DeviceID is None or other.DeviceID is None:
                    if self.DeviceID != other.DeviceID:
                        return (-1 if self.DeviceID is None else 1)
                else:
                    if self.DeviceID < other.DeviceID:
                        return -1
                    elif self.DeviceID > other.DeviceID:
                        return 1
                if self.DeviceIndex is None or other.DeviceIndex is None:
                    if self.DeviceIndex != other.DeviceIndex:
                        return (-1 if self.DeviceIndex is None else 1)
                else:
                    if self.DeviceIndex < other.DeviceIndex:
                        return -1
                    elif self.DeviceIndex > other.DeviceIndex:
                        return 1
                if self.ChannelIndex is None or other.ChannelIndex is None:
                    if self.ChannelIndex != other.ChannelIndex:
                        return (-1 if self.ChannelIndex is None else 1)
                else:
                    if self.ChannelIndex < other.ChannelIndex:
                        return -1
                    elif self.ChannelIndex > other.ChannelIndex:
                        return 1
                if self.Status is None or other.Status is None:
                    if self.Status != other.Status:
                        return (-1 if self.Status is None else 1)
                else:
                    if self.Status < other.Status:
                        return -1
                    elif self.Status > other.Status:
                        return 1
                if self.ErrorCode is None or other.ErrorCode is None:
                    if self.ErrorCode != other.ErrorCode:
                        return (-1 if self.ErrorCode is None else 1)
                else:
                    if self.ErrorCode < other.ErrorCode:
                        return -1
                    elif self.ErrorCode > other.ErrorCode:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DeviceStatusInfo)

        __repr__ = __str__

    _M_Vistek.Data._t_DeviceStatusInfo = IcePy.defineStruct('::Vistek::Data::DeviceStatusInfo', DeviceStatusInfo, (), (
        ('DeviceID', (), IcePy._t_string),
        ('DeviceIndex', (), IcePy._t_long),
        ('ChannelIndex', (), IcePy._t_int),
        ('Status', (), IcePy._t_int),
        ('ErrorCode', (), IcePy._t_int)
    ))

    _M_Vistek.Data.DeviceStatusInfo = DeviceStatusInfo
    del DeviceStatusInfo

if '_t_DeviceStatusInfoList' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data._t_DeviceStatusInfoList = IcePy.defineSequence('::Vistek::Data::DeviceStatusInfoList', (), _M_Vistek.Data._t_DeviceStatusInfo)

# End of module Vistek.Data

__name__ = 'Vistek'

# End of module Vistek
