# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `DataService.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Ice_Identity_ice
import Ice_Instrumentation_ice
import DBEntity_ice
import ServiceCommon_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Ice.Instrumentation
_M_Ice.Instrumentation = Ice.openModule('Ice.Instrumentation')

# Included module Vistek
_M_Vistek = Ice.openModule('Vistek')

# Included module Vistek.Data
_M_Vistek.Data = Ice.openModule('Vistek.Data')

# Included module Vistek.Core
_M_Vistek.Core = Ice.openModule('Vistek.Core')

# Start of module Vistek
__name__ = 'Vistek'

# Start of module Vistek.Data
__name__ = 'Vistek.Data'

if 'DataError' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataError = Ice.createTempClass()
    class DataError(Ice.UserException):
        def __init__(self, errorCode=0, errorMessage=''):
            self.errorCode = errorCode
            self.errorMessage = errorMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Vistek::Data::DataError'

    _M_Vistek.Data._t_DataError = IcePy.defineException('::Vistek::Data::DataError', DataError, (), False, None, (
        ('errorCode', (), IcePy._t_int, False, 0),
        ('errorMessage', (), IcePy._t_string, False, 0)
    ))
    DataError._ice_type = _M_Vistek.Data._t_DataError

    _M_Vistek.Data.DataError = DataError
    del DataError

if 'SubscribeTypes' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.SubscribeTypes = Ice.createTempClass()
    class SubscribeTypes(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    SubscribeTypes.STNone = SubscribeTypes("STNone", 0)
    SubscribeTypes.STDevice = SubscribeTypes("STDevice", 1)
    SubscribeTypes.STStorage = SubscribeTypes("STStorage", 2)
    SubscribeTypes.STService = SubscribeTypes("STService", 4)
    SubscribeTypes._enumerators = { 0:SubscribeTypes.STNone, 1:SubscribeTypes.STDevice, 2:SubscribeTypes.STStorage, 4:SubscribeTypes.STService }

    _M_Vistek.Data._t_SubscribeTypes = IcePy.defineEnum('::Vistek::Data::SubscribeTypes', SubscribeTypes, (), SubscribeTypes._enumerators)

    _M_Vistek.Data.SubscribeTypes = SubscribeTypes
    del SubscribeTypes

if 'DataProviderRelayMessage' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderRelayMessage = Ice.createTempClass()
    class DataProviderRelayMessage(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderRelayMessage:
                raise RuntimeError('Vistek.Data.DataProviderRelayMessage is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DataProviderRelayMessage')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderRelayMessage'

        def ice_staticId():
            return '::Vistek::Data::DataProviderRelayMessage'
        ice_staticId = staticmethod(ice_staticId)

        def MessageReceived(self, msg, current=None):
            pass

        def DuplexMessageReceived(self, msg, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderRelayMessage)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderRelayMessagePrx = Ice.createTempClass()
    class DataProviderRelayMessagePrx(Ice.ObjectPrx):

        def MessageReceived(self, msg, _ctx=None):
            return _M_Vistek.Data.DataProviderRelayMessage._op_MessageReceived.invoke(self, ((msg, ), _ctx))

        def begin_MessageReceived(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderRelayMessage._op_MessageReceived.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_MessageReceived(self, _r):
            return _M_Vistek.Data.DataProviderRelayMessage._op_MessageReceived.end(self, _r)

        def DuplexMessageReceived(self, msg, _ctx=None):
            return _M_Vistek.Data.DataProviderRelayMessage._op_DuplexMessageReceived.invoke(self, ((msg, ), _ctx))

        def begin_DuplexMessageReceived(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderRelayMessage._op_DuplexMessageReceived.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_DuplexMessageReceived(self, _r):
            return _M_Vistek.Data.DataProviderRelayMessage._op_DuplexMessageReceived.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderRelayMessagePrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderRelayMessage', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderRelayMessagePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderRelayMessage'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderRelayMessagePrx = IcePy.defineProxy('::Vistek::Data::DataProviderRelayMessage', DataProviderRelayMessagePrx)

    _M_Vistek.Data._t_DataProviderRelayMessage = IcePy.defineClass('::Vistek::Data::DataProviderRelayMessage', DataProviderRelayMessage, -1, (), True, False, None, (), ())
    DataProviderRelayMessage._ice_type = _M_Vistek.Data._t_DataProviderRelayMessage

    DataProviderRelayMessage._op_MessageReceived = IcePy.Operation('MessageReceived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), None, ())
    DataProviderRelayMessage._op_DuplexMessageReceived = IcePy.Operation('DuplexMessageReceived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), ((), _M_Vistek.Data._t_ServiceMessage, False, 0), ())

    _M_Vistek.Data.DataProviderRelayMessage = DataProviderRelayMessage
    del DataProviderRelayMessage

    _M_Vistek.Data.DataProviderRelayMessagePrx = DataProviderRelayMessagePrx
    del DataProviderRelayMessagePrx

if 'DataProviderDmDeviceNotify' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderDmDeviceNotify = Ice.createTempClass()
    class DataProviderDmDeviceNotify(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderDmDeviceNotify:
                raise RuntimeError('Vistek.Data.DataProviderDmDeviceNotify is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DataProviderDmDeviceNotify')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderDmDeviceNotify'

        def ice_staticId():
            return '::Vistek::Data::DataProviderDmDeviceNotify'
        ice_staticId = staticmethod(ice_staticId)

        def DmDeviceChangedNotify(self, device, changetype, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderDmDeviceNotify)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderDmDeviceNotifyPrx = Ice.createTempClass()
    class DataProviderDmDeviceNotifyPrx(Ice.ObjectPrx):

        def DmDeviceChangedNotify(self, device, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderDmDeviceNotify._op_DmDeviceChangedNotify.invoke(self, ((device, changetype), _ctx))

        def begin_DmDeviceChangedNotify(self, device, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDmDeviceNotify._op_DmDeviceChangedNotify.begin(self, ((device, changetype), _response, _ex, _sent, _ctx))

        def end_DmDeviceChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderDmDeviceNotify._op_DmDeviceChangedNotify.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDmDeviceNotifyPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderDmDeviceNotify', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderDmDeviceNotifyPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderDmDeviceNotify'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderDmDeviceNotifyPrx = IcePy.defineProxy('::Vistek::Data::DataProviderDmDeviceNotify', DataProviderDmDeviceNotifyPrx)

    _M_Vistek.Data._t_DataProviderDmDeviceNotify = IcePy.defineClass('::Vistek::Data::DataProviderDmDeviceNotify', DataProviderDmDeviceNotify, -1, (), True, False, None, (), ())
    DataProviderDmDeviceNotify._ice_type = _M_Vistek.Data._t_DataProviderDmDeviceNotify

    DataProviderDmDeviceNotify._op_DmDeviceChangedNotify = IcePy.Operation('DmDeviceChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDevice, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())

    _M_Vistek.Data.DataProviderDmDeviceNotify = DataProviderDmDeviceNotify
    del DataProviderDmDeviceNotify

    _M_Vistek.Data.DataProviderDmDeviceNotifyPrx = DataProviderDmDeviceNotifyPrx
    del DataProviderDmDeviceNotifyPrx

if 'DataProviderDmStorageNotify' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderDmStorageNotify = Ice.createTempClass()
    class DataProviderDmStorageNotify(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderDmStorageNotify:
                raise RuntimeError('Vistek.Data.DataProviderDmStorageNotify is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DataProviderDmStorageNotify')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderDmStorageNotify'

        def ice_staticId():
            return '::Vistek::Data::DataProviderDmStorageNotify'
        ice_staticId = staticmethod(ice_staticId)

        def DmStorageChangedNotify(self, storage, changetype, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderDmStorageNotify)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderDmStorageNotifyPrx = Ice.createTempClass()
    class DataProviderDmStorageNotifyPrx(Ice.ObjectPrx):

        def DmStorageChangedNotify(self, storage, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderDmStorageNotify._op_DmStorageChangedNotify.invoke(self, ((storage, changetype), _ctx))

        def begin_DmStorageChangedNotify(self, storage, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDmStorageNotify._op_DmStorageChangedNotify.begin(self, ((storage, changetype), _response, _ex, _sent, _ctx))

        def end_DmStorageChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderDmStorageNotify._op_DmStorageChangedNotify.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDmStorageNotifyPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderDmStorageNotify', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderDmStorageNotifyPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderDmStorageNotify'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderDmStorageNotifyPrx = IcePy.defineProxy('::Vistek::Data::DataProviderDmStorageNotify', DataProviderDmStorageNotifyPrx)

    _M_Vistek.Data._t_DataProviderDmStorageNotify = IcePy.defineClass('::Vistek::Data::DataProviderDmStorageNotify', DataProviderDmStorageNotify, -1, (), True, False, None, (), ())
    DataProviderDmStorageNotify._ice_type = _M_Vistek.Data._t_DataProviderDmStorageNotify

    DataProviderDmStorageNotify._op_DmStorageChangedNotify = IcePy.Operation('DmStorageChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmStorage, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())

    _M_Vistek.Data.DataProviderDmStorageNotify = DataProviderDmStorageNotify
    del DataProviderDmStorageNotify

    _M_Vistek.Data.DataProviderDmStorageNotifyPrx = DataProviderDmStorageNotifyPrx
    del DataProviderDmStorageNotifyPrx

if 'DataProviderDmServiceNotify' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderDmServiceNotify = Ice.createTempClass()
    class DataProviderDmServiceNotify(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderDmServiceNotify:
                raise RuntimeError('Vistek.Data.DataProviderDmServiceNotify is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DataProviderDmServiceNotify')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderDmServiceNotify'

        def ice_staticId():
            return '::Vistek::Data::DataProviderDmServiceNotify'
        ice_staticId = staticmethod(ice_staticId)

        def DmServiceChangedNotify(self, service, changetype, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderDmServiceNotify)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderDmServiceNotifyPrx = Ice.createTempClass()
    class DataProviderDmServiceNotifyPrx(Ice.ObjectPrx):

        def DmServiceChangedNotify(self, service, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderDmServiceNotify._op_DmServiceChangedNotify.invoke(self, ((service, changetype), _ctx))

        def begin_DmServiceChangedNotify(self, service, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDmServiceNotify._op_DmServiceChangedNotify.begin(self, ((service, changetype), _response, _ex, _sent, _ctx))

        def end_DmServiceChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderDmServiceNotify._op_DmServiceChangedNotify.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDmServiceNotifyPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderDmServiceNotify', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderDmServiceNotifyPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderDmServiceNotify'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderDmServiceNotifyPrx = IcePy.defineProxy('::Vistek::Data::DataProviderDmServiceNotify', DataProviderDmServiceNotifyPrx)

    _M_Vistek.Data._t_DataProviderDmServiceNotify = IcePy.defineClass('::Vistek::Data::DataProviderDmServiceNotify', DataProviderDmServiceNotify, -1, (), True, False, None, (), ())
    DataProviderDmServiceNotify._ice_type = _M_Vistek.Data._t_DataProviderDmServiceNotify

    DataProviderDmServiceNotify._op_DmServiceChangedNotify = IcePy.Operation('DmServiceChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmService, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())

    _M_Vistek.Data.DataProviderDmServiceNotify = DataProviderDmServiceNotify
    del DataProviderDmServiceNotify

    _M_Vistek.Data.DataProviderDmServiceNotifyPrx = DataProviderDmServiceNotifyPrx
    del DataProviderDmServiceNotifyPrx

if 'DataProviderAsRuleNotify' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderAsRuleNotify = Ice.createTempClass()
    class DataProviderAsRuleNotify(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderAsRuleNotify:
                raise RuntimeError('Vistek.Data.DataProviderAsRuleNotify is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DataProviderAsRuleNotify')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderAsRuleNotify'

        def ice_staticId():
            return '::Vistek::Data::DataProviderAsRuleNotify'
        ice_staticId = staticmethod(ice_staticId)

        def AsRuleChangedNotify(self, rule, changetype, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderAsRuleNotify)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderAsRuleNotifyPrx = Ice.createTempClass()
    class DataProviderAsRuleNotifyPrx(Ice.ObjectPrx):

        def AsRuleChangedNotify(self, rule, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderAsRuleNotify._op_AsRuleChangedNotify.invoke(self, ((rule, changetype), _ctx))

        def begin_AsRuleChangedNotify(self, rule, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderAsRuleNotify._op_AsRuleChangedNotify.begin(self, ((rule, changetype), _response, _ex, _sent, _ctx))

        def end_AsRuleChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderAsRuleNotify._op_AsRuleChangedNotify.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderAsRuleNotifyPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderAsRuleNotify', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderAsRuleNotifyPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderAsRuleNotify'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderAsRuleNotifyPrx = IcePy.defineProxy('::Vistek::Data::DataProviderAsRuleNotify', DataProviderAsRuleNotifyPrx)

    _M_Vistek.Data._t_DataProviderAsRuleNotify = IcePy.defineClass('::Vistek::Data::DataProviderAsRuleNotify', DataProviderAsRuleNotify, -1, (), True, False, None, (), ())
    DataProviderAsRuleNotify._ice_type = _M_Vistek.Data._t_DataProviderAsRuleNotify

    DataProviderAsRuleNotify._op_AsRuleChangedNotify = IcePy.Operation('AsRuleChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_AsRule, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())

    _M_Vistek.Data.DataProviderAsRuleNotify = DataProviderAsRuleNotify
    del DataProviderAsRuleNotify

    _M_Vistek.Data.DataProviderAsRuleNotifyPrx = DataProviderAsRuleNotifyPrx
    del DataProviderAsRuleNotifyPrx

if 'DataProviderDeviceStatusNotify' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderDeviceStatusNotify = Ice.createTempClass()
    class DataProviderDeviceStatusNotify(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderDeviceStatusNotify:
                raise RuntimeError('Vistek.Data.DataProviderDeviceStatusNotify is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Data::DataProviderDeviceStatusNotify')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderDeviceStatusNotify'

        def ice_staticId():
            return '::Vistek::Data::DataProviderDeviceStatusNotify'
        ice_staticId = staticmethod(ice_staticId)

        def DeviceStatusNotify(self, status, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderDeviceStatusNotify)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderDeviceStatusNotifyPrx = Ice.createTempClass()
    class DataProviderDeviceStatusNotifyPrx(Ice.ObjectPrx):

        def DeviceStatusNotify(self, status, _ctx=None):
            return _M_Vistek.Data.DataProviderDeviceStatusNotify._op_DeviceStatusNotify.invoke(self, ((status, ), _ctx))

        def begin_DeviceStatusNotify(self, status, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDeviceStatusNotify._op_DeviceStatusNotify.begin(self, ((status, ), _response, _ex, _sent, _ctx))

        def end_DeviceStatusNotify(self, _r):
            return _M_Vistek.Data.DataProviderDeviceStatusNotify._op_DeviceStatusNotify.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderDeviceStatusNotifyPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderDeviceStatusNotify', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderDeviceStatusNotifyPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderDeviceStatusNotify'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderDeviceStatusNotifyPrx = IcePy.defineProxy('::Vistek::Data::DataProviderDeviceStatusNotify', DataProviderDeviceStatusNotifyPrx)

    _M_Vistek.Data._t_DataProviderDeviceStatusNotify = IcePy.defineClass('::Vistek::Data::DataProviderDeviceStatusNotify', DataProviderDeviceStatusNotify, -1, (), True, False, None, (), ())
    DataProviderDeviceStatusNotify._ice_type = _M_Vistek.Data._t_DataProviderDeviceStatusNotify

    DataProviderDeviceStatusNotify._op_DeviceStatusNotify = IcePy.Operation('DeviceStatusNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfo, False, 0),), (), None, ())

    _M_Vistek.Data.DataProviderDeviceStatusNotify = DataProviderDeviceStatusNotify
    del DataProviderDeviceStatusNotify

    _M_Vistek.Data.DataProviderDeviceStatusNotifyPrx = DataProviderDeviceStatusNotifyPrx
    del DataProviderDeviceStatusNotifyPrx

if 'DataProviderCallback' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderCallback = Ice.createTempClass()
    class DataProviderCallback(_M_Vistek.Core.BaseCallback):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderCallback:
                raise RuntimeError('Vistek.Data.DataProviderCallback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Core::BaseCallback', '::Vistek::Data::DataProviderCallback')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderCallback'

        def ice_staticId():
            return '::Vistek::Data::DataProviderCallback'
        ice_staticId = staticmethod(ice_staticId)

        def DmDeviceChangedNotify(self, device, changetype, current=None):
            pass

        def DmDeviceVideoChannelChangedNotify(self, channel, changetype, current=None):
            pass

        def DmStorageChangedNotify(self, storage, changetype, current=None):
            pass

        def DmServiceChangedNotify(self, service, changetype, current=None):
            pass

        def DmGroupChangedNotify(self, group, changetype, current=None):
            pass

        def DmGroupChangedListNotify(self, groupList, changetype, current=None):
            pass

        def AsRuleChangedNotify(self, rule, changetype, current=None):
            pass

        def DeviceStatusNotify(self, status, current=None):
            pass

        def DeviceStatusListNotify(self, status, current=None):
            pass

        def MessageReceived(self, msg, current=None):
            pass

        def DuplexMessageReceived(self, msg, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderCallback)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderCallbackPrx = Ice.createTempClass()
    class DataProviderCallbackPrx(_M_Vistek.Core.BaseCallbackPrx):

        def DmDeviceChangedNotify(self, device, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmDeviceChangedNotify.invoke(self, ((device, changetype), _ctx))

        def begin_DmDeviceChangedNotify(self, device, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmDeviceChangedNotify.begin(self, ((device, changetype), _response, _ex, _sent, _ctx))

        def end_DmDeviceChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DmDeviceChangedNotify.end(self, _r)

        def DmDeviceVideoChannelChangedNotify(self, channel, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmDeviceVideoChannelChangedNotify.invoke(self, ((channel, changetype), _ctx))

        def begin_DmDeviceVideoChannelChangedNotify(self, channel, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmDeviceVideoChannelChangedNotify.begin(self, ((channel, changetype), _response, _ex, _sent, _ctx))

        def end_DmDeviceVideoChannelChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DmDeviceVideoChannelChangedNotify.end(self, _r)

        def DmStorageChangedNotify(self, storage, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmStorageChangedNotify.invoke(self, ((storage, changetype), _ctx))

        def begin_DmStorageChangedNotify(self, storage, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmStorageChangedNotify.begin(self, ((storage, changetype), _response, _ex, _sent, _ctx))

        def end_DmStorageChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DmStorageChangedNotify.end(self, _r)

        def DmServiceChangedNotify(self, service, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmServiceChangedNotify.invoke(self, ((service, changetype), _ctx))

        def begin_DmServiceChangedNotify(self, service, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmServiceChangedNotify.begin(self, ((service, changetype), _response, _ex, _sent, _ctx))

        def end_DmServiceChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DmServiceChangedNotify.end(self, _r)

        def DmGroupChangedNotify(self, group, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmGroupChangedNotify.invoke(self, ((group, changetype), _ctx))

        def begin_DmGroupChangedNotify(self, group, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmGroupChangedNotify.begin(self, ((group, changetype), _response, _ex, _sent, _ctx))

        def end_DmGroupChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DmGroupChangedNotify.end(self, _r)

        def DmGroupChangedListNotify(self, groupList, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmGroupChangedListNotify.invoke(self, ((groupList, changetype), _ctx))

        def begin_DmGroupChangedListNotify(self, groupList, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DmGroupChangedListNotify.begin(self, ((groupList, changetype), _response, _ex, _sent, _ctx))

        def end_DmGroupChangedListNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DmGroupChangedListNotify.end(self, _r)

        def AsRuleChangedNotify(self, rule, changetype, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_AsRuleChangedNotify.invoke(self, ((rule, changetype), _ctx))

        def begin_AsRuleChangedNotify(self, rule, changetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_AsRuleChangedNotify.begin(self, ((rule, changetype), _response, _ex, _sent, _ctx))

        def end_AsRuleChangedNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_AsRuleChangedNotify.end(self, _r)

        def DeviceStatusNotify(self, status, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DeviceStatusNotify.invoke(self, ((status, ), _ctx))

        def begin_DeviceStatusNotify(self, status, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DeviceStatusNotify.begin(self, ((status, ), _response, _ex, _sent, _ctx))

        def end_DeviceStatusNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DeviceStatusNotify.end(self, _r)

        def DeviceStatusListNotify(self, status, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DeviceStatusListNotify.invoke(self, ((status, ), _ctx))

        def begin_DeviceStatusListNotify(self, status, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DeviceStatusListNotify.begin(self, ((status, ), _response, _ex, _sent, _ctx))

        def end_DeviceStatusListNotify(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DeviceStatusListNotify.end(self, _r)

        def MessageReceived(self, msg, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_MessageReceived.invoke(self, ((msg, ), _ctx))

        def begin_MessageReceived(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_MessageReceived.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_MessageReceived(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_MessageReceived.end(self, _r)

        def DuplexMessageReceived(self, msg, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DuplexMessageReceived.invoke(self, ((msg, ), _ctx))

        def begin_DuplexMessageReceived(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallback._op_DuplexMessageReceived.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_DuplexMessageReceived(self, _r):
            return _M_Vistek.Data.DataProviderCallback._op_DuplexMessageReceived.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderCallbackPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderCallback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderCallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderCallback'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderCallbackPrx = IcePy.defineProxy('::Vistek::Data::DataProviderCallback', DataProviderCallbackPrx)

    _M_Vistek.Data._t_DataProviderCallback = IcePy.defineClass('::Vistek::Data::DataProviderCallback', DataProviderCallback, -1, (), True, False, None, (_M_Vistek.Core._t_BaseCallback,), ())
    DataProviderCallback._ice_type = _M_Vistek.Data._t_DataProviderCallback

    DataProviderCallback._op_DmDeviceChangedNotify = IcePy.Operation('DmDeviceChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDevice, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_DmDeviceVideoChannelChangedNotify = IcePy.Operation('DmDeviceVideoChannelChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDeviceVideoChannel, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_DmStorageChangedNotify = IcePy.Operation('DmStorageChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmStorage, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_DmServiceChangedNotify = IcePy.Operation('DmServiceChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmService, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_DmGroupChangedNotify = IcePy.Operation('DmGroupChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmGroup, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_DmGroupChangedListNotify = IcePy.Operation('DmGroupChangedListNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmGroupList, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_AsRuleChangedNotify = IcePy.Operation('AsRuleChangedNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_AsRule, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderCallback._op_DeviceStatusNotify = IcePy.Operation('DeviceStatusNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfo, False, 0),), (), None, ())
    DataProviderCallback._op_DeviceStatusListNotify = IcePy.Operation('DeviceStatusListNotify', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfoList, False, 0),), (), None, ())
    DataProviderCallback._op_MessageReceived = IcePy.Operation('MessageReceived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), None, ())
    DataProviderCallback._op_DuplexMessageReceived = IcePy.Operation('DuplexMessageReceived', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), ((), _M_Vistek.Data._t_ServiceMessage, False, 0), ())

    _M_Vistek.Data.DataProviderCallback = DataProviderCallback
    del DataProviderCallback

    _M_Vistek.Data.DataProviderCallbackPrx = DataProviderCallbackPrx
    del DataProviderCallbackPrx

if 'DataProviderServer' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderServer = Ice.createTempClass()
    class DataProviderServer(_M_Vistek.Core.BaseService):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderServer:
                raise RuntimeError('Vistek.Data.DataProviderServer is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Core::BaseService', '::Vistek::Data::DataProviderServer')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderServer'

        def ice_staticId():
            return '::Vistek::Data::DataProviderServer'
        ice_staticId = staticmethod(ice_staticId)

        def GetAllPlatforms(self, current=None):
            pass

        def GetAllDevices(self, current=None):
            pass

        def GetAllStorages(self, current=None):
            pass

        def GetStoragesByServiceID(self, sid, current=None):
            pass

        def GetAllServices(self, current=None):
            pass

        def GetServicesByServerID(self, sid, current=None):
            pass

        def GetAllDeviceStatus(self, current=None):
            pass

        def GetAllGroups(self, current=None):
            pass

        def GetLeafGroups(self, current=None):
            pass

        def GetAllDeviceGroupMapping(self, current=None):
            pass

        def GetAllDevicesWithRuleList(self, current=None):
            pass

        def GetRuleList(self, current=None):
            pass

        def GetRuleListByServiceID(self, serviceID, current=None):
            pass

        def GetRuleByID(self, rid, current=None):
            pass

        def GetAllEventSource(self, current=None):
            pass

        def KeepAlive(self, ticks, current=None):
            pass

        def UpdateRule(self, rule, current=None):
            pass

        def DeleteRule(self, rule, current=None):
            pass

        def UpdateRoleService(self, svc, current=None):
            pass

        def DeleteRoleService(self, svc, current=None):
            pass

        def UpdateDevice(self, dev, current=None):
            pass

        def UpdateDeviceList(self, devList, current=None):
            pass

        def PushEvent(self, evt, dct, current=None):
            pass

        def PushRGB24Image(self, evt, w, h, imageData, current=None):
            pass

        def PushPngImage(self, rid, eid, imageData, current=None):
            pass

        def UploadTrafficCheckPointResult(self, result, current=None):
            pass

        def UploadTrafficCheckPointResultOneway(self, result, current=None):
            pass

        def ReportDeviceStatus(self, statusInfo, current=None):
            pass

        def ReportDeviceStatusList(self, statusList, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderServer)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderServerPrx = Ice.createTempClass()
    class DataProviderServerPrx(_M_Vistek.Core.BaseServicePrx):

        def GetAllPlatforms(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllPlatforms.invoke(self, ((), _ctx))

        def begin_GetAllPlatforms(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllPlatforms.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllPlatforms(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllPlatforms.end(self, _r)

        def GetAllDevices(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDevices.invoke(self, ((), _ctx))

        def begin_GetAllDevices(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDevices.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllDevices(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDevices.end(self, _r)

        def GetAllStorages(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllStorages.invoke(self, ((), _ctx))

        def begin_GetAllStorages(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllStorages.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllStorages(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllStorages.end(self, _r)

        def GetStoragesByServiceID(self, sid, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetStoragesByServiceID.invoke(self, ((sid, ), _ctx))

        def begin_GetStoragesByServiceID(self, sid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetStoragesByServiceID.begin(self, ((sid, ), _response, _ex, _sent, _ctx))

        def end_GetStoragesByServiceID(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetStoragesByServiceID.end(self, _r)

        def GetAllServices(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllServices.invoke(self, ((), _ctx))

        def begin_GetAllServices(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllServices.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllServices(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllServices.end(self, _r)

        def GetServicesByServerID(self, sid, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetServicesByServerID.invoke(self, ((sid, ), _ctx))

        def begin_GetServicesByServerID(self, sid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetServicesByServerID.begin(self, ((sid, ), _response, _ex, _sent, _ctx))

        def end_GetServicesByServerID(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetServicesByServerID.end(self, _r)

        def GetAllDeviceStatus(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDeviceStatus.invoke(self, ((), _ctx))

        def begin_GetAllDeviceStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDeviceStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllDeviceStatus(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDeviceStatus.end(self, _r)

        def GetAllGroups(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllGroups.invoke(self, ((), _ctx))

        def begin_GetAllGroups(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllGroups.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllGroups(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllGroups.end(self, _r)

        def GetLeafGroups(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetLeafGroups.invoke(self, ((), _ctx))

        def begin_GetLeafGroups(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetLeafGroups.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetLeafGroups(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetLeafGroups.end(self, _r)

        def GetAllDeviceGroupMapping(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDeviceGroupMapping.invoke(self, ((), _ctx))

        def begin_GetAllDeviceGroupMapping(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDeviceGroupMapping.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllDeviceGroupMapping(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDeviceGroupMapping.end(self, _r)

        def GetAllDevicesWithRuleList(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDevicesWithRuleList.invoke(self, ((), _ctx))

        def begin_GetAllDevicesWithRuleList(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDevicesWithRuleList.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllDevicesWithRuleList(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllDevicesWithRuleList.end(self, _r)

        def GetRuleList(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleList.invoke(self, ((), _ctx))

        def begin_GetRuleList(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleList.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetRuleList(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleList.end(self, _r)

        def GetRuleListByServiceID(self, serviceID, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleListByServiceID.invoke(self, ((serviceID, ), _ctx))

        def begin_GetRuleListByServiceID(self, serviceID, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleListByServiceID.begin(self, ((serviceID, ), _response, _ex, _sent, _ctx))

        def end_GetRuleListByServiceID(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleListByServiceID.end(self, _r)

        def GetRuleByID(self, rid, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleByID.invoke(self, ((rid, ), _ctx))

        def begin_GetRuleByID(self, rid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleByID.begin(self, ((rid, ), _response, _ex, _sent, _ctx))

        def end_GetRuleByID(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetRuleByID.end(self, _r)

        def GetAllEventSource(self, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllEventSource.invoke(self, ((), _ctx))

        def begin_GetAllEventSource(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_GetAllEventSource.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_GetAllEventSource(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_GetAllEventSource.end(self, _r)

        def KeepAlive(self, ticks, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_KeepAlive.invoke(self, ((ticks, ), _ctx))

        def begin_KeepAlive(self, ticks, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_KeepAlive.begin(self, ((ticks, ), _response, _ex, _sent, _ctx))

        def end_KeepAlive(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_KeepAlive.end(self, _r)

        def UpdateRule(self, rule, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateRule.invoke(self, ((rule, ), _ctx))

        def begin_UpdateRule(self, rule, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateRule.begin(self, ((rule, ), _response, _ex, _sent, _ctx))

        def end_UpdateRule(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_UpdateRule.end(self, _r)

        def DeleteRule(self, rule, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_DeleteRule.invoke(self, ((rule, ), _ctx))

        def begin_DeleteRule(self, rule, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_DeleteRule.begin(self, ((rule, ), _response, _ex, _sent, _ctx))

        def end_DeleteRule(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_DeleteRule.end(self, _r)

        def UpdateRoleService(self, svc, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateRoleService.invoke(self, ((svc, ), _ctx))

        def begin_UpdateRoleService(self, svc, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateRoleService.begin(self, ((svc, ), _response, _ex, _sent, _ctx))

        def end_UpdateRoleService(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_UpdateRoleService.end(self, _r)

        def DeleteRoleService(self, svc, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_DeleteRoleService.invoke(self, ((svc, ), _ctx))

        def begin_DeleteRoleService(self, svc, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_DeleteRoleService.begin(self, ((svc, ), _response, _ex, _sent, _ctx))

        def end_DeleteRoleService(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_DeleteRoleService.end(self, _r)

        def UpdateDevice(self, dev, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateDevice.invoke(self, ((dev, ), _ctx))

        def begin_UpdateDevice(self, dev, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateDevice.begin(self, ((dev, ), _response, _ex, _sent, _ctx))

        def end_UpdateDevice(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_UpdateDevice.end(self, _r)

        def UpdateDeviceList(self, devList, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateDeviceList.invoke(self, ((devList, ), _ctx))

        def begin_UpdateDeviceList(self, devList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UpdateDeviceList.begin(self, ((devList, ), _response, _ex, _sent, _ctx))

        def end_UpdateDeviceList(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_UpdateDeviceList.end(self, _r)

        def PushEvent(self, evt, dct, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_PushEvent.invoke(self, ((evt, dct), _ctx))

        def begin_PushEvent(self, evt, dct, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_PushEvent.begin(self, ((evt, dct), _response, _ex, _sent, _ctx))

        def end_PushEvent(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_PushEvent.end(self, _r)

        def PushRGB24Image(self, evt, w, h, imageData, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_PushRGB24Image.invoke(self, ((evt, w, h, imageData), _ctx))

        def begin_PushRGB24Image(self, evt, w, h, imageData, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_PushRGB24Image.begin(self, ((evt, w, h, imageData), _response, _ex, _sent, _ctx))

        def end_PushRGB24Image(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_PushRGB24Image.end(self, _r)

        def PushPngImage(self, rid, eid, imageData, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_PushPngImage.invoke(self, ((rid, eid, imageData), _ctx))

        def begin_PushPngImage(self, rid, eid, imageData, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_PushPngImage.begin(self, ((rid, eid, imageData), _response, _ex, _sent, _ctx))

        def end_PushPngImage(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_PushPngImage.end(self, _r)

        def UploadTrafficCheckPointResult(self, result, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UploadTrafficCheckPointResult.invoke(self, ((result, ), _ctx))

        def begin_UploadTrafficCheckPointResult(self, result, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UploadTrafficCheckPointResult.begin(self, ((result, ), _response, _ex, _sent, _ctx))

        def end_UploadTrafficCheckPointResult(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_UploadTrafficCheckPointResult.end(self, _r)

        def UploadTrafficCheckPointResultOneway(self, result, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UploadTrafficCheckPointResultOneway.invoke(self, ((result, ), _ctx))

        def begin_UploadTrafficCheckPointResultOneway(self, result, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_UploadTrafficCheckPointResultOneway.begin(self, ((result, ), _response, _ex, _sent, _ctx))

        def end_UploadTrafficCheckPointResultOneway(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_UploadTrafficCheckPointResultOneway.end(self, _r)

        def ReportDeviceStatus(self, statusInfo, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_ReportDeviceStatus.invoke(self, ((statusInfo, ), _ctx))

        def begin_ReportDeviceStatus(self, statusInfo, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_ReportDeviceStatus.begin(self, ((statusInfo, ), _response, _ex, _sent, _ctx))

        def end_ReportDeviceStatus(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_ReportDeviceStatus.end(self, _r)

        def ReportDeviceStatusList(self, statusList, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_ReportDeviceStatusList.invoke(self, ((statusList, ), _ctx))

        def begin_ReportDeviceStatusList(self, statusList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServer._op_ReportDeviceStatusList.begin(self, ((statusList, ), _response, _ex, _sent, _ctx))

        def end_ReportDeviceStatusList(self, _r):
            return _M_Vistek.Data.DataProviderServer._op_ReportDeviceStatusList.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerPrx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderServer', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderServerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderServer'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderServerPrx = IcePy.defineProxy('::Vistek::Data::DataProviderServer', DataProviderServerPrx)

    _M_Vistek.Data._t_DataProviderServer = IcePy.defineClass('::Vistek::Data::DataProviderServer', DataProviderServer, -1, (), True, False, None, (_M_Vistek.Core._t_BaseService,), ())
    DataProviderServer._ice_type = _M_Vistek.Data._t_DataProviderServer

    DataProviderServer._op_GetAllPlatforms = IcePy.Operation('GetAllPlatforms', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmPlatformList, False, 0), ())
    DataProviderServer._op_GetAllDevices = IcePy.Operation('GetAllDevices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmDeviceList, False, 0), ())
    DataProviderServer._op_GetAllStorages = IcePy.Operation('GetAllStorages', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmStorageList, False, 0), ())
    DataProviderServer._op_GetStoragesByServiceID = IcePy.Operation('GetStoragesByServiceID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Vistek.Data._t_DmStorageList, False, 0), ())
    DataProviderServer._op_GetAllServices = IcePy.Operation('GetAllServices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmServiceList, False, 0), ())
    DataProviderServer._op_GetServicesByServerID = IcePy.Operation('GetServicesByServerID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Vistek.Data._t_DmServiceList, False, 0), ())
    DataProviderServer._op_GetAllDeviceStatus = IcePy.Operation('GetAllDeviceStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DeviceStatusInfoList, False, 0), ())
    DataProviderServer._op_GetAllGroups = IcePy.Operation('GetAllGroups', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmGroupList, False, 0), ())
    DataProviderServer._op_GetLeafGroups = IcePy.Operation('GetLeafGroups', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmGroupList, False, 0), ())
    DataProviderServer._op_GetAllDeviceGroupMapping = IcePy.Operation('GetAllDeviceGroupMapping', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmDevice2GroupList, False, 0), ())
    DataProviderServer._op_GetAllDevicesWithRuleList = IcePy.Operation('GetAllDevicesWithRuleList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_DmDeviceList, False, 0), ())
    DataProviderServer._op_GetRuleList = IcePy.Operation('GetRuleList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_AsRuleList, False, 0), ())
    DataProviderServer._op_GetRuleListByServiceID = IcePy.Operation('GetRuleListByServiceID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Vistek.Data._t_AsRuleList, False, 0), ())
    DataProviderServer._op_GetRuleByID = IcePy.Operation('GetRuleByID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Vistek.Data._t_AsRule, False, 0), ())
    DataProviderServer._op_GetAllEventSource = IcePy.Operation('GetAllEventSource', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_Vistek.Data._t_AsEventSourceList, False, 0), ())
    DataProviderServer._op_KeepAlive = IcePy.Operation('KeepAlive', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), ((), IcePy._t_long, False, 0), ())
    DataProviderServer._op_UpdateRule = IcePy.Operation('UpdateRule', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_AsRule, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataProviderServer._op_DeleteRule = IcePy.Operation('DeleteRule', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_AsRule, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataProviderServer._op_UpdateRoleService = IcePy.Operation('UpdateRoleService', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmService, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataProviderServer._op_DeleteRoleService = IcePy.Operation('DeleteRoleService', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmService, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    DataProviderServer._op_UpdateDevice = IcePy.Operation('UpdateDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDevice, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    DataProviderServer._op_UpdateDeviceList = IcePy.Operation('UpdateDeviceList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DmDeviceList, False, 0),), (), ((), IcePy._t_bool, False, 0), ())
    DataProviderServer._op_PushEvent = IcePy.Operation('PushEvent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_AsEvent, False, 0), ((), _M_Vistek.Data._t_DataChangeTypes, False, 0)), (), None, ())
    DataProviderServer._op_PushRGB24Image = IcePy.Operation('PushRGB24Image', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_AsEvent, False, 0), ((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0), ((), _M_Vistek.Data._t_Binary, False, 0)), (), None, ())
    DataProviderServer._op_PushPngImage = IcePy.Operation('PushPngImage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_Vistek.Data._t_Binary, False, 0)), (), None, ())
    DataProviderServer._op_UploadTrafficCheckPointResult = IcePy.Operation('UploadTrafficCheckPointResult', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_TrafficCheckPointResult, False, 0),), (), None, (_M_Vistek.Data._t_DataError,))
    DataProviderServer._op_UploadTrafficCheckPointResultOneway = IcePy.Operation('UploadTrafficCheckPointResultOneway', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_TrafficCheckPointResult, False, 0),), (), None, ())
    DataProviderServer._op_ReportDeviceStatus = IcePy.Operation('ReportDeviceStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfo, False, 0),), (), None, ())
    DataProviderServer._op_ReportDeviceStatusList = IcePy.Operation('ReportDeviceStatusList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_DeviceStatusInfoList, False, 0),), (), None, ())

    _M_Vistek.Data.DataProviderServer = DataProviderServer
    del DataProviderServer

    _M_Vistek.Data.DataProviderServerPrx = DataProviderServerPrx
    del DataProviderServerPrx

if 'DataProviderServerV0' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderServerV0 = Ice.createTempClass()
    class DataProviderServerV0(_M_Vistek.Data.DataProviderServer):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderServerV0:
                raise RuntimeError('Vistek.Data.DataProviderServerV0 is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Core::BaseService', '::Vistek::Data::DataProviderServer', '::Vistek::Data::DataProviderServerV0')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderServerV0'

        def ice_staticId():
            return '::Vistek::Data::DataProviderServerV0'
        ice_staticId = staticmethod(ice_staticId)

        def SubscribeChangesDmDevice(self, ident, current=None):
            pass

        def SubscribeChangesDmStorage(self, ident, current=None):
            pass

        def SubscribeChangesDmServices(self, ident, current=None):
            pass

        def SubscribeChangesAsRules(self, ident, current=None):
            pass

        def SubscribeMessage(self, ident, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderServerV0)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderServerV0Prx = Ice.createTempClass()
    class DataProviderServerV0Prx(_M_Vistek.Data.DataProviderServerPrx):

        def SubscribeChangesDmDevice(self, ident, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmDevice.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeChangesDmDevice(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmDevice.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeChangesDmDevice(self, _r):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmDevice.end(self, _r)

        def SubscribeChangesDmStorage(self, ident, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmStorage.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeChangesDmStorage(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmStorage.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeChangesDmStorage(self, _r):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmStorage.end(self, _r)

        def SubscribeChangesDmServices(self, ident, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmServices.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeChangesDmServices(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmServices.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeChangesDmServices(self, _r):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesDmServices.end(self, _r)

        def SubscribeChangesAsRules(self, ident, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesAsRules.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeChangesAsRules(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesAsRules.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeChangesAsRules(self, _r):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeChangesAsRules.end(self, _r)

        def SubscribeMessage(self, ident, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeMessage.invoke(self, ((ident, ), _ctx))

        def begin_SubscribeMessage(self, ident, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeMessage.begin(self, ((ident, ), _response, _ex, _sent, _ctx))

        def end_SubscribeMessage(self, _r):
            return _M_Vistek.Data.DataProviderServerV0._op_SubscribeMessage.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV0Prx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderServerV0', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderServerV0Prx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderServerV0'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderServerV0Prx = IcePy.defineProxy('::Vistek::Data::DataProviderServerV0', DataProviderServerV0Prx)

    _M_Vistek.Data._t_DataProviderServerV0 = IcePy.defineClass('::Vistek::Data::DataProviderServerV0', DataProviderServerV0, -1, (), True, False, None, (_M_Vistek.Data._t_DataProviderServer,), ())
    DataProviderServerV0._ice_type = _M_Vistek.Data._t_DataProviderServerV0

    DataProviderServerV0._op_SubscribeChangesDmDevice = IcePy.Operation('SubscribeChangesDmDevice', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())
    DataProviderServerV0._op_SubscribeChangesDmStorage = IcePy.Operation('SubscribeChangesDmStorage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())
    DataProviderServerV0._op_SubscribeChangesDmServices = IcePy.Operation('SubscribeChangesDmServices', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())
    DataProviderServerV0._op_SubscribeChangesAsRules = IcePy.Operation('SubscribeChangesAsRules', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())
    DataProviderServerV0._op_SubscribeMessage = IcePy.Operation('SubscribeMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0),), (), None, ())

    _M_Vistek.Data.DataProviderServerV0 = DataProviderServerV0
    del DataProviderServerV0

    _M_Vistek.Data.DataProviderServerV0Prx = DataProviderServerV0Prx
    del DataProviderServerV0Prx

if 'DataProviderServerV1' not in _M_Vistek.Data.__dict__:
    _M_Vistek.Data.DataProviderServerV1 = Ice.createTempClass()
    class DataProviderServerV1(_M_Vistek.Data.DataProviderServer):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Data.DataProviderServerV1:
                raise RuntimeError('Vistek.Data.DataProviderServerV1 is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Core::BaseService', '::Vistek::Data::DataProviderServer', '::Vistek::Data::DataProviderServerV1')

        def ice_id(self, current=None):
            return '::Vistek::Data::DataProviderServerV1'

        def ice_staticId():
            return '::Vistek::Data::DataProviderServerV1'
        ice_staticId = staticmethod(ice_staticId)

        def SubscribeCallbacks(self, ident, subList, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Data._t_DataProviderServerV1)

        __repr__ = __str__

    _M_Vistek.Data.DataProviderServerV1Prx = Ice.createTempClass()
    class DataProviderServerV1Prx(_M_Vistek.Data.DataProviderServerPrx):

        def SubscribeCallbacks(self, ident, subList, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV1._op_SubscribeCallbacks.invoke(self, ((ident, subList), _ctx))

        def begin_SubscribeCallbacks(self, ident, subList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV1._op_SubscribeCallbacks.begin(self, ((ident, subList), _response, _ex, _sent, _ctx))

        def end_SubscribeCallbacks(self, _r):
            return _M_Vistek.Data.DataProviderServerV1._op_SubscribeCallbacks.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Data.DataProviderServerV1Prx.ice_checkedCast(proxy, '::Vistek::Data::DataProviderServerV1', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Data.DataProviderServerV1Prx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Data::DataProviderServerV1'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Data._t_DataProviderServerV1Prx = IcePy.defineProxy('::Vistek::Data::DataProviderServerV1', DataProviderServerV1Prx)

    _M_Vistek.Data._t_DataProviderServerV1 = IcePy.defineClass('::Vistek::Data::DataProviderServerV1', DataProviderServerV1, -1, (), True, False, None, (_M_Vistek.Data._t_DataProviderServer,), ())
    DataProviderServerV1._ice_type = _M_Vistek.Data._t_DataProviderServerV1

    DataProviderServerV1._op_SubscribeCallbacks = IcePy.Operation('SubscribeCallbacks', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Ice._t_Identity, False, 0), ((), _M_Ice._t_StringSeq, False, 0)), (), None, ())

    _M_Vistek.Data.DataProviderServerV1 = DataProviderServerV1
    del DataProviderServerV1

    _M_Vistek.Data.DataProviderServerV1Prx = DataProviderServerV1Prx
    del DataProviderServerV1Prx

# End of module Vistek.Data

__name__ = 'Vistek'

# End of module Vistek
