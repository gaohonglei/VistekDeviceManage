# **********************************************************************
#
# Copyright (c) 2003-2015 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.1
#
# <auto-generated>
#
# Generated from file `ServiceCommon.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy
import Ice_Identity_ice
import DBEntity_ice

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Vistek
_M_Vistek = Ice.openModule('Vistek')

# Included module Vistek.Data
_M_Vistek.Data = Ice.openModule('Vistek.Data')

# Start of module Vistek
__name__ = 'Vistek'

# Start of module Vistek.Core
_M_Vistek.Core = Ice.openModule('Vistek.Core')
__name__ = 'Vistek.Core'

if 'GenericError' not in _M_Vistek.Core.__dict__:
    _M_Vistek.Core.GenericError = Ice.createTempClass()
    class GenericError(Ice.UserException):
        def __init__(self, errorCode=0, errorMessage=''):
            self.errorCode = errorCode
            self.errorMessage = errorMessage

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Vistek::Core::GenericError'

    _M_Vistek.Core._t_GenericError = IcePy.defineException('::Vistek::Core::GenericError', GenericError, (), False, None, (
        ('errorCode', (), IcePy._t_int, False, 0),
        ('errorMessage', (), IcePy._t_string, False, 0)
    ))
    GenericError._ice_type = _M_Vistek.Core._t_GenericError

    _M_Vistek.Core.GenericError = GenericError
    del GenericError

if 'ServiceException' not in _M_Vistek.Core.__dict__:
    _M_Vistek.Core.ServiceException = Ice.createTempClass()
    class ServiceException(_M_Vistek.Core.GenericError):
        def __init__(self, errorCode=0, errorMessage=''):
            _M_Vistek.Core.GenericError.__init__(self, errorCode, errorMessage)

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Vistek::Core::ServiceException'

    _M_Vistek.Core._t_ServiceException = IcePy.defineException('::Vistek::Core::ServiceException', ServiceException, (), False, _M_Vistek.Core._t_GenericError, ())
    ServiceException._ice_type = _M_Vistek.Core._t_ServiceException

    _M_Vistek.Core.ServiceException = ServiceException
    del ServiceException

if 'BaseCallback' not in _M_Vistek.Core.__dict__:
    _M_Vistek.Core.BaseCallback = Ice.createTempClass()
    class BaseCallback(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Core.BaseCallback:
                raise RuntimeError('Vistek.Core.BaseCallback is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Core::BaseCallback')

        def ice_id(self, current=None):
            return '::Vistek::Core::BaseCallback'

        def ice_staticId():
            return '::Vistek::Core::BaseCallback'
        ice_staticId = staticmethod(ice_staticId)

        def CheckConnection(self, ticks, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Core._t_BaseCallback)

        __repr__ = __str__

    _M_Vistek.Core.BaseCallbackPrx = Ice.createTempClass()
    class BaseCallbackPrx(Ice.ObjectPrx):

        def CheckConnection(self, ticks, _ctx=None):
            return _M_Vistek.Core.BaseCallback._op_CheckConnection.invoke(self, ((ticks, ), _ctx))

        def begin_CheckConnection(self, ticks, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Core.BaseCallback._op_CheckConnection.begin(self, ((ticks, ), _response, _ex, _sent, _ctx))

        def end_CheckConnection(self, _r):
            return _M_Vistek.Core.BaseCallback._op_CheckConnection.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Core.BaseCallbackPrx.ice_checkedCast(proxy, '::Vistek::Core::BaseCallback', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Core.BaseCallbackPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Core::BaseCallback'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Core._t_BaseCallbackPrx = IcePy.defineProxy('::Vistek::Core::BaseCallback', BaseCallbackPrx)

    _M_Vistek.Core._t_BaseCallback = IcePy.defineClass('::Vistek::Core::BaseCallback', BaseCallback, -1, (), True, False, None, (), ())
    BaseCallback._ice_type = _M_Vistek.Core._t_BaseCallback

    BaseCallback._op_CheckConnection = IcePy.Operation('CheckConnection', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_long, False, 0),), (), None, ())

    _M_Vistek.Core.BaseCallback = BaseCallback
    del BaseCallback

    _M_Vistek.Core.BaseCallbackPrx = BaseCallbackPrx
    del BaseCallbackPrx

if 'BaseService' not in _M_Vistek.Core.__dict__:
    _M_Vistek.Core.BaseService = Ice.createTempClass()
    class BaseService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Vistek.Core.BaseService:
                raise RuntimeError('Vistek.Core.BaseService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::Vistek::Core::BaseService')

        def ice_id(self, current=None):
            return '::Vistek::Core::BaseService'

        def ice_staticId():
            return '::Vistek::Core::BaseService'
        ice_staticId = staticmethod(ice_staticId)

        def GetServiceInfo(self, token, current=None):
            pass

        def GetStatusInfo(self, token, current=None):
            pass

        def SendServiceMessage(self, msg, current=None):
            pass

        def PostServiceMessage(self, msg, current=None):
            pass

        def SendServiceMessageDuplex(self, msg, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Vistek.Core._t_BaseService)

        __repr__ = __str__

    _M_Vistek.Core.BaseServicePrx = Ice.createTempClass()
    class BaseServicePrx(Ice.ObjectPrx):

        def GetServiceInfo(self, token, _ctx=None):
            return _M_Vistek.Core.BaseService._op_GetServiceInfo.invoke(self, ((token, ), _ctx))

        def begin_GetServiceInfo(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Core.BaseService._op_GetServiceInfo.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_GetServiceInfo(self, _r):
            return _M_Vistek.Core.BaseService._op_GetServiceInfo.end(self, _r)

        def GetStatusInfo(self, token, _ctx=None):
            return _M_Vistek.Core.BaseService._op_GetStatusInfo.invoke(self, ((token, ), _ctx))

        def begin_GetStatusInfo(self, token, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Core.BaseService._op_GetStatusInfo.begin(self, ((token, ), _response, _ex, _sent, _ctx))

        def end_GetStatusInfo(self, _r):
            return _M_Vistek.Core.BaseService._op_GetStatusInfo.end(self, _r)

        def SendServiceMessage(self, msg, _ctx=None):
            return _M_Vistek.Core.BaseService._op_SendServiceMessage.invoke(self, ((msg, ), _ctx))

        def begin_SendServiceMessage(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Core.BaseService._op_SendServiceMessage.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_SendServiceMessage(self, _r):
            return _M_Vistek.Core.BaseService._op_SendServiceMessage.end(self, _r)

        def PostServiceMessage(self, msg, _ctx=None):
            return _M_Vistek.Core.BaseService._op_PostServiceMessage.invoke(self, ((msg, ), _ctx))

        def begin_PostServiceMessage(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Core.BaseService._op_PostServiceMessage.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_PostServiceMessage(self, _r):
            return _M_Vistek.Core.BaseService._op_PostServiceMessage.end(self, _r)

        def SendServiceMessageDuplex(self, msg, _ctx=None):
            return _M_Vistek.Core.BaseService._op_SendServiceMessageDuplex.invoke(self, ((msg, ), _ctx))

        def begin_SendServiceMessageDuplex(self, msg, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Vistek.Core.BaseService._op_SendServiceMessageDuplex.begin(self, ((msg, ), _response, _ex, _sent, _ctx))

        def end_SendServiceMessageDuplex(self, _r):
            return _M_Vistek.Core.BaseService._op_SendServiceMessageDuplex.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Vistek.Core.BaseServicePrx.ice_checkedCast(proxy, '::Vistek::Core::BaseService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Vistek.Core.BaseServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::Vistek::Core::BaseService'
        ice_staticId = staticmethod(ice_staticId)

    _M_Vistek.Core._t_BaseServicePrx = IcePy.defineProxy('::Vistek::Core::BaseService', BaseServicePrx)

    _M_Vistek.Core._t_BaseService = IcePy.defineClass('::Vistek::Core::BaseService', BaseService, -1, (), True, False, None, (), ())
    BaseService._ice_type = _M_Vistek.Core._t_BaseService

    BaseService._op_GetServiceInfo = IcePy.Operation('GetServiceInfo', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), _M_Vistek.Data._t_DmService, False, 0), ())
    BaseService._op_GetStatusInfo = IcePy.Operation('GetStatusInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), ((), IcePy._t_string, False, 0), (_M_Vistek.Core._t_ServiceException,))
    BaseService._op_SendServiceMessage = IcePy.Operation('SendServiceMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), ((), IcePy._t_int, False, 0), ())
    BaseService._op_PostServiceMessage = IcePy.Operation('PostServiceMessage', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), None, ())
    BaseService._op_SendServiceMessageDuplex = IcePy.Operation('SendServiceMessageDuplex', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Vistek.Data._t_ServiceMessage, False, 0),), (), ((), _M_Vistek.Data._t_ServiceMessage, False, 0), ())

    _M_Vistek.Core.BaseService = BaseService
    del BaseService

    _M_Vistek.Core.BaseServicePrx = BaseServicePrx
    del BaseServicePrx

# End of module Vistek.Core

__name__ = 'Vistek'

# End of module Vistek
