#!/usr/bin/env python
# -*- coding-utf-8 -*-


import copy, logging, logging.handlers, os, Ice, sys, threading, threadpool, time, traceback, uuid

import Vistek.Data as v_data
import Vistek.Device as v_device
import vistek_util.DeviceCallbackI as DeviceCallbackI
try:
    import Queue
except:
    import queue as Queue
try:
    import device_process
except:
    from . import device_process

if not os.path.exists("log"):
    os.mkdir("log")
file_name = "{0}-{1}".format(__name__, os.getpid())
log_file = "log\{0}.log".format(file_name)
log_level = logging.DEBUG

logger = logging.getLogger(file_name)
handler = logging.handlers.TimedRotatingFileHandler(log_file, when="D", interval=1)

can_proc_device_queue = Queue.Queue()
def get_can_proc_dev_queue():
    global can_proc_device_queue
    return can_proc_device_queue

#logger.disabled = True
formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] [%(name)s] [%(filename)s:%(funcName)s:%(lineno)s]  [%(message)s]")

handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(log_level)

class SessionKeepLiveThread(threading.Thread):
    def __init__(self,timeout, session, client=None):
        threading.Thread.__init__(self)
        self._session, self._timeout, self._terminated, self._cond = session, timeout, False, threading.Condition()
        self._client = None
        if client is not None:
            self._client = client

    def _reconnect(self, client):
        try:
            if self._client is not None:
                center_session = self._client.proxy.Register(self._client._register_info)
                self._client.session = center_session
                self._session = center_session
        except:
            traceback.print_exc()
    def run(self):
        self._cond.acquire()
        try:
            while not self._terminated:
                self._cond.wait(self._timeout)
                if not self._terminated:
                    try:
                        self._session.KeepAlive()
                    except Ice.LocalException as ex:
                        self._reconnect(self._client)
                        # if self._client is not None:
                        #     proxy = v_device.DeviceDispatchServiceV1Prx.uncheckedCast(self._client.conn)
                        #     self._client.proxy = proxy
                        #     center_session = proxy.Register(self._client._register_info)
                        #     self._client.session = center_session
                        #self._terminated = True
        finally:
            self._cond.release()

    def terminate(self):
        self._cond.acquire()
        try:
            self._terminated = True
            self._cond.notify()
        finally:
            self._cond.release()

def enum(**enums):
    return type('Enum', (), enums)

def handle_request_result(request, result):
    can_proc_device_queue = get_can_proc_dev_queue()
    logger.info("request:{0} result:{1}".format(request, result))
    if result and len(result):
        can_proc_device_queue.put(result)

CLIENTTYPE = enum (CLIENTNONE=-1, CLIENTNOMAL=0, CLIENTFIND=1)

VProtocolType = enum(EMPTY=0, SDK=1, ONVIF=2, PSIA=3,  GB28181=4, HDCCTV=5)
DEVICE_MANU_TYPE = enum (HIKVISION="hikvision", DAHUA="dahua", PSIA="psia", ONVIF="onvif")

class DeviceCenterClient():
    def __init_ice_config(self, **properties):
        """
        : init ice base configs.
        :return communicator
        """
        init_data = Ice.InitializationData()
        center_pros = Ice.createProperties(sys.argv)
        center_pros.setProperty("Ice.MessageSizeMax", "5120")
        center_pros.setProperty("Ice.RetryIntervals", "0 100 500 1000")
        #[center_pros.setProperty(key, item) for key, item in properties.items()]
        for key, item in properties.items():
            center_pros.setProperty(key, item)
        init_data.properties = center_pros
        self._communicator = Ice.initialize(sys.argv, init_data)
        return self._communicator

    def __init__(self, proxy_value, client_type=None):
        """

        :param proxy_value: string connect string.
        :param client_type: rtCheck|rtNormal
        """
        self.__init_ice_config()
        self._call_back = self._data_sender = self._center_session = self._proxy = None
        self._proxy_value = proxy_value#client need to connect server string.
        self._id = uuid.uuid4()

        self._whole_devices_list = {}
        self._unprocess_device_lists = {}
        self._device_count = {}#device_type device_counts
        self._add_device_queue = Queue.Queue()
        self._del_device_queue = Queue.Queue()
        self._alter_device_queue = Queue.Queue()

        self._dismissed = threading.Event()
        if not client_type:
            client_type = v_data.RegisterType.rtNormal
        self._register_info, self._register_info.id, self._register_info.type = v_data.RegisterInfo(), \
                                                                                str(self._id), client_type
        self._connect()


        self._keep_live_thrd = None
        self._get_device_lists_thrd = threading.Thread(target=DeviceCenterClient._do_main_loop, name="get_device_lists", args=(self,))
        self._check_device_thrd = threading.Thread(target=DeviceCenterClient._do_try_process_device, name="check device", args=(self, ))

    @property
    def device_counts(self):
        """

        :return: device_count map (id, counts)
        """
        return self._device_count

    @property
    def session(self):
        return self._center_session

    @session.setter
    def session(self, session):
        self._center_session = session
    @property
    def conn(self):
        return self._conn

    @property
    def proxy(self):
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        if proxy != self._proxy:
            self._proxy = proxy
    @property
    def addDeviceQueue(self):
        return self._add_device_queue

    @property
    def delDeviceQueue(self):
        return self._del_device_queue

    @property
    def alterDeviceQueue(self):
        return self._del_device_queue

    def subscribe_data_callback(self, func):
        self._data_sender = func

    def data_callback(self, *args, **kwargs):
        if self._data_sender is not None:
            self._data_sender(*args, **kwargs)

    def device_change_callback(self, *args, **kwargs):
        device = args[0]
        data_change_type = args[1]
        if data_change_type == v_data.DataChangeTypes.DataAdded:
            logger.info("device add begin device:{0} type:{1}".format(device, data_change_type))
            dev_list = device_process.try_device_process(device)
            if dev_list is not None and 0 < len(dev_list):
                logger.info("device add device success:{0}".format(device))
                self.session.UpdateDeviceList(dev_list)

    def start(self):
        """
        start a center client according the type.
        normal:start get the devices that getted by servers thread.
        check: get the devices and try proccess devices.
        :return None
        """
        if self._register_info.type == v_data.RegisterType.rtNormal:
            if self._get_device_lists_thrd:
                self._get_device_lists_thrd.start()
        elif self._register_info.type == v_data.RegisterType.rtCheck:
            if self._check_device_thrd:
                self._check_device_thrd.start()
        else:
            logger.error("client type error")

    def stop(self):
        """
        stop the thread.
        :return
        """
        self._dismissed.set()
        if self._get_device_lists_thrd and self._get_device_lists_thrd.is_alive():
            self._get_device_lists_thrd.join()
        del self._get_device_lists_thrd
        if self._check_device_thrd and self._check_device_thrd.is_alive():
            self._check_device_thrd.join()
        del self._check_device_thrd
        if self._keep_live_thrd and self._keep_live_thrd.is_alive():
            self._keep_live_thrd.terminate()
        #self._conn.destory()
        self._communicator.destroy()

    def _add_devices(self, cur_device_lists, new_device_lists):
        """
        compare the devices to find the new deivces to add.
        :param cur_device_lists: dict
        :param new_device_lists: dict
        :return: dict need to add new device dict.
        """
        add_devices = {}
        for id, device in new_device_lists.items():
            if id not in cur_device_lists:
                add_devices[device.DeviceID] = device
        return add_devices

    def _del_devices(self, cur_device_lists, new_device_lists):
        """

        :param cur_device_lists: dict
        :param new_device_lists: dict
        :return: dict need to del device dict.
        """
        del_devices = {}
        for id, device in cur_device_lists.items():
            if id not in new_device_lists:
                del_devices[device.DeviceID] = device
        return del_devices

    def _alter_devices(self, cur_device_lists, new_device_lists):
        """
        need to find the alter devices according rules.
        :param cur_device_lists: dict
        :param new_device_lists: dict
        :return dict need to alter device dict.
        """
        alter_devices = {}
        return alter_devices

    def _connect(self, timeout=5):
        """
        connect to server.
        :param timeout: int keep live interval
        :return a proxy to call the server service.
        """
        while True:
            try:
                self._conn = self._communicator.stringToProxy(self._proxy_value)
                self._proxy = v_device.DeviceDispatchServiceV1Prx.checkedCast(self._conn)
                if not self._proxy:
                    continue
                    #return False
                adapter = self._communicator.createObjectAdapter("")
                ident = Ice.Identity()
                ident.name = Ice.generateUUID()
                ident.category = ""
                self._call_back = DeviceCallbackI.deviceCallBackI()
                adapter.add(self._call_back, ident)
                adapter.activate()
                self._proxy.ice_getConnection().setAdapter(adapter)
                self._proxy.SubscribeCallback(ident)
                self._center_session = self._proxy.Register(self._register_info)
                if not self._center_session:
                    continue
                    #return False
                self._keep_live_thrd = SessionKeepLiveThread(timeout, self._center_session, self)
                self._keep_live_thrd.start()
                if self._call_back is not None:
                    func = getattr(self, "data_callback")
                    if func is not None:
                        self._call_back.subscribe_ptz_cmd(func)
                    device_change_func = getattr(self, "device_change_callback")
                    if device_change_func is not None:
                        self._call_back.subscribe_device_change(device_change_func)
                return True
            except Exception:
                traceback.print_exc()
                continue
                #return False

    def __pre_procees_device(self, device_list):
        """
        find the devices that not include protocol and the manufacture values.
        and drop the other devices that not on line.
        :param device_list: list devices get from the server.
        :return tuple (upload device_list, online device list, offline deivce lists)
         the last two are limited: on line but not contain the protocol and manufacture.
        """
        upload_list = []
        on_line_thread = device_process.DeviceOnLineThread()
        for device in device_list:
            if device_process.is_device_can_process(device):
                upload_list.append(device)
            else:
                on_line_thread.push_device(device)
        on_line_thread.start()
        on_line_thread.join()
        return (upload_list, on_line_thread.online_device_lists(), on_line_thread.offline_device_lists())

    def _do_try_process_device(self, pool_size=20):
        """
        try process device on line but don't have protocol flag and return the proper host to process device.
        :param pool_size: int pool size of to process device.
        :return None
        """
        new_device_lists = {}
        worker_pool = threadpool.ThreadPool(20)
        TryProcTimeInterval = 60
        while True:
            try:
                if self._dismissed.is_set() or not self.session:
                    break
                device_lists = self.session.GetDeviceList()
                if len(device_lists) != len(self._whole_devices_list):
                    logger.debug("get all deviceslists:{0} session:{1}".format(device_lists, self.session))
                #logger.debug("Get Device Lists, count:{0} devices:{1}".format(len(device_lists), device_lists))
                get_devices_fail_interval = 5# s
                if 1 > len(device_lists):
                    time.sleep(get_devices_fail_interval)
                    continue
                logger.debug("Get Device Lists, count:{0}".format(len(device_lists)))
                update_device_lists = work_req_list = try_proc_list = []
                online_dev_list = offline_dev_list = []
                update_device_lists, online_dev_list, offline_dev_list = self.__pre_procees_device(device_lists)
                if 0 < len(online_dev_list):
                    logger.info("try process lists count:{0} lists:{1}".format(len(online_dev_list), online_dev_list))
                for device in online_dev_list:
                    work_req_list.extend(threadpool.makeRequests(device_process.try_device_process, [((device,), {})], handle_request_result))
                for device in offline_dev_list:
                    if device.DeviceID not in self._unprocess_device_lists:
                        self._unprocess_device_lists[device.DeviceID] = device
                for req in work_req_list:
                    worker_pool.putRequest(req)
                worker_pool.wait()
                dev_queue = device_process.get_can_proc_device_queue()

                logger.info("try process success lists count:{0} ".format(dev_queue.qsize()))
                while not dev_queue.empty():
                    device = dev_queue.get()
                    update_device_lists.append(device)
                logger.warning("can't process device lists count:{0} try process list count:{1} can process list count:{2}"
                               .format(len(self._unprocess_device_lists), len(work_req_list), len(update_device_lists)))

                if 0 < len(update_device_lists) and self.session:
                    self.session.UpdateDeviceList(update_device_lists)
                    update_device_lists[:] = []
                time.sleep(TryProcTimeInterval)
            except:
                print(traceback.print_exc())
                continue

    def __acount_device(self, device_lists):
        psia_counts = hik_counts = onvif_counts = 0
        for device in device_lists:
            if device.ProtocolFlag == VProtocolType.PSIA:
                psia_counts += 1
            elif device.ProtocolFlag == VProtocolType.SDK and str(device.Manufacture).lower() == "hikvision":
                hik_counts += 1
            elif device.ProtocolFlag == VProtocolType.ONVIF:
                onvif_counts += 1
        device_count = {}
        if 0 < hik_counts:
            device_count[DEVICE_MANU_TYPE.HIKVISION] = hik_counts
        if 0 < psia_counts:
            device_count[DEVICE_MANU_TYPE.PISA] = psia_counts
        if 0 < onvif_counts:
            device_count[DEVICE_MANU_TYPE.ONVIF] = onvif_counts
        self._device_count.update(device_count)
        out_str = "center all-device counts:{0} hikvision:{1} onvif:{2} psia:{3}".format(len(device_lists), hik_counts, onvif_counts, psia_counts)
        logger.debug(out_str)
        return device_count

    def __sort_device_by_old(self, old_device_lists, new_device_lists):
        add_list = self._add_devices(old_device_lists, new_device_lists)
        if 0 < len(add_list):
            self._add_device_queue.put(add_list)
        del_list = self._del_devices(old_device_lists, new_device_lists)
        if 0 < len(del_list):
            self._del_device_queue.put(del_list)
        alter_list = self._alter_devices(old_device_lists, new_device_lists)
        if 0 < len(alter_list):
            self._alter_device_queue.put(alter_list)
        out_str = "center all-device counts:{0} add:{1} del:{2} alter:{3}".format(len(new_device_lists)
                                                                                  , len(add_list), len(del_list)
                                                                                  , len(del_list))
        logger.debug(out_str)

    def _do_main_loop(self):
        new_device_lists = {}
        device_lists = None
        while True:
            try:
                if self._dismissed.is_set() or not self.session:
                    break
                device_lists = self.session.GetDeviceList()
                get_devices_fail_interval = 5# s
                if 1 > len(device_lists):
                    time.sleep(get_devices_fail_interval)
                    continue
                logger.debug("Get Device Lists, count:{0}".format(len(device_lists)))
                if len(new_device_lists) != len(device_lists):
                    logger.debug("now device lists:{0}".format(device_lists))
                for device in device_lists:
                    new_device_lists[str(device.DeviceID)] = device
                self.__acount_device(device_lists)
                self.__sort_device_by_old(self._whole_devices_list, new_device_lists)
                logger.debug("Get Device addqueue:{0} del:{1} alter:{2}".format(self._add_device_queue.qsize(),
                                                                              self._del_device_queue.qsize(),
                                                                              self._alter_device_queue.qsize()))
                if 0 < len(new_device_lists):
                    self._whole_devices_list = copy.deepcopy(new_device_lists)
                new_device_lists.clear()
                time.sleep(30)
            except Exception as e:
                print("exception:", e)
                continue
        #finally:
            #if self._keep_live_thrd:
            #    self._keep_live_thrd.terminate()
            #    self._keep_live_thrd.join()
        logger.debug("center session:{0}".format(self.session) )
        self._communicator.waitForShutdown()

if __name__ == "__main__":
    #center_client = DeviceCenterClient("device_dispatch_service:tcp -h localhost -p 54300", v_data.RegisterType.rtNormal)
    center_client = DeviceCenterClient("device_dispatch_service:tcp -h localhost -p 54300", v_data.RegisterType.rtCheck)
    #center_client = DeviceCenterClient("device_dispatch_service:tcp -h 172.16.0.20 -p 54321", v_data.RegisterType.rtCheck)
    center_client.start()
    raw_input()
    center_client.stop()
    raw_input()

